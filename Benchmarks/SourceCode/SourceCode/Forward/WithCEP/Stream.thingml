import "Sender.thingml"

thing fragment StreamCepMsgs {
    message cep_forwardMessage();
    message cep_forwardMessageWithParams(p1 : Double, p2 : Double, p3 : Double, p4 : Double, p5 : Double);
    message cep_forwardWithModif(p1 : Double, p2 : Double, p3 : Double, p4 : Double, p5 : Double);
    
    message cep_endBench();
}

thing StreamWithCep includes StreamCepMsgs, SenderMsgs {
    provided port senderService {
        receives forwardMessage, forwardMessageWithParams, forwardWithModif, endBench
    }
    
    required port cepService {
        sends cep_forwardMessage, cep_forwardMessageWithParams, cep_forwardWithModif, cep_endBench
    }
    
    function complexFunction(param : Double) : Double do
        return param % 3
    end
    
    stream forwardStream do
        from senderService?forwardMessage
        action cepService!cep_forwardMessage()
    end
    
     stream forwardStreamWithParams do
        from evt : senderService?forwardMessageWithParams
        select p1 : evt.p1, p2 : evt.p2, p3 : evt.p3, p4 : evt.p4, p5 : evt.p5
        action cepService!cep_forwardMessageWithParams(p1,p2,p3,p4,p5)
    end
    
    stream forwardStreamWithModif do
        from evt : senderService?forwardWithModif
        select p1 : complexFunction(evt.p1), p2 : complexFunction(evt.p2), 
                p3 : complexFunction(evt.p3), p4 : complexFunction(evt.p4), p5 : complexFunction(evt.p5)
        action cepService!cep_forwardWithModif(p1,p2,p3,p4,p5)
    end
    
    stream forwardEnd do
        from senderService?endBench
        action cepService!cep_endBench()
    end
    
    statechart Stream init Init {
       state Init{}    
    }
}


