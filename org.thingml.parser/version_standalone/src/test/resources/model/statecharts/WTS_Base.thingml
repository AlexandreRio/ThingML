import "../msp/led.thingml"
import "../msp/timer.thingml"
import "../msp/RF2500.thingml"
import "../msp/MSP430Sensor.thingml"

message GetData() @code "1";
message GetStatus() @code "2";
message GetName() @code "3";

message ResetMinMax() @id "10"; 
message SetMinAlarm(value : Integer) @code "11";
message SetMaxAlarm(value : Integer) @code "12";
message SetBattAlarm(value : Integer) @code "13";
message SetInterval(value : Integer) @code "14";
message SetName(new_name : String) @code "15";

message SensorData(temp : Integer, min : Integer, max : Integer, batt : Integer) @code "64";
message SensorStatus(interval : Integer, min_alarm : Integer, max_alarm : Integer, batt_alarm : Integer) @code "65";
message SensorName(name : String) @code "66";

// Definition of the sensor protocol
thing WTSClient {  

	port WTSClient {
		sends GetData, GetStatus, GetName
		sends ResetMinMax, SetMinAlarm, SetMaxAlarm, SetBattAlarm, SetInterval, SetName
		receives SensorData, SensorStatus, SensorName
	}
}

thing WTS {

	port WTSClient {
		receives GetData, GetStatus, GetName
		receives ResetMinMax, SetMinAlarm, SetMaxAlarm, SetBattAlarm, SetInterval, SetName
		sends SensorData, SensorStatus, SensorName
	}
	
	port Timer {
		receives timeout
		sends start, cancel
	}
	
	port LED {
		sends light_on, light_off
	}
	
	port MSP430Sensor {
		sends mesure_temperature
		sends mesure_voltage
		//receives mesure_adc
		
		receives temperature_value
		receives voltage_value
	}

	property name : String
	property temp : Integer 
	property volt : Integer
	property interval : Integer

	// Behaviour of the application
	statechart WTS init INIT {
	
		state INIT {
			
			on entry do 
				Timer!start(1, 1000)
				LED!light_on(1) // RED
				LED!light_on(2) // GREEN
				'strcpy('&name&', '&"No name "&');'
				interval = 0
			end
			
			transition -> ACTIVE 
				event e : Timer?timeout
				guard e.timer_id == 1
				action do
					LED!light_off(1)
					LED!light_off(2)
				end
			
		}
	
		composite state ACTIVE init ReadSensorValues {
			
			property interval_cpt : Integer
			property min : Integer
			property max : Integer
			
			on entry interval_cpt = 0
			
			state WaitingForCmd {
			
				on entry do 
					Timer!start(1, 10000)
				end
				
				transition -> ReadSensorValues
					event e : Timer?timeout
					guard e.timer_id == 1
			
				transition GetData -> WaitingForCmd
					event WTSClient?GetData
					action WTSClient!SensorData(temp, 0, 0, volt)
					
				transition GetStatus -> WaitingForCmd
					event WTSClient?GetStatus
					action WTSClient!SensorStatus(interval, 0, 0, 0) 

				transition GetName -> WaitingForCmd
					event WTSClient?GetName
					action WTSClient!SensorName(name)
					
				transition SetName -> WaitingForCmd
					event e : WTSClient?SetName
					action 'strcpy('&name&', '&e.new_name&');'
			}
			
			state ReadSensorValues {
				
				on entry do
					LED!light_on(2) // GREEN
					MSP430Sensor!mesure_temperature()
				end
				
				on exit do
					LED!light_off(2)
					interval_cpt = interval_cpt + 1
					if ( not (interval == 0) and interval_cpt > interval ) do
						WTSClient!SensorData(temp, 0, 0, volt)
						interval_cpt = 0
					end
				end
				
				transition temperature -> ReadSensorValues
					event e : MSP430Sensor?temperature_value
					action do
						temp = e.v
						if (temp > max) max = temp
						if (temp < min) min = temp
						MSP430Sensor!mesure_voltage()
					end
				
				transition voltage -> WaitingForCmd
					event e : MSP430Sensor?voltage_value
					action volt = e.v

			}
		}
	}
}