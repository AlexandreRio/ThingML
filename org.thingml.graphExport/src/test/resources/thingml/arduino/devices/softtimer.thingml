import "../core/typedefs.thingml"
import "../core/scheduler.thingml"

thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Int16);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

// Manage a set of software timers.
thing SoftTimer includes TimerMsgs, SchedulerMsgs
{
	provided port SoftTimer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
	
	required port Polling {
		receives loop
	}
    
    statechart SoftTimer init Idle {
    
        property target : Long = 0
    
        state Idle {
            transition start -> Counting
                event m : SoftTimer?timer_start
                guard m.delay > 0
                action target = 'millis()' + m.delay
        }
        
        state Counting {
            
            transition timeout -> Idle 
                event Polling?loop
                guard not ('millis()' < target)
                action SoftTimer!timer_timeout()
                
            transition cancel -> Idle
                event m : SoftTimer?timer_cancel
                
            internal reset
                event m : SoftTimer?timer_start
                guard m.delay > 0
                action target = 'millis()' + m.delay

        }
    }
}