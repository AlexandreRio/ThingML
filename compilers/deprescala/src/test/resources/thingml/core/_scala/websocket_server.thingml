import "../websocket.thingml"
import "timer.thingml"

datatype WSServer
@java_type "org.thingml.utils.WSServer";

thing WebSocketServerScala includes WebSocketServer
@pim "WebSocketServer"
@platform "scala"
@scala_trait "org.thingml.utils.WSServerObserver"
@thingml_maven_dep "org.thingml.utils.ws"
{
    
    property server : WSServer
    
    provided port messaging_int_send {
        sends send
    }

    required port messaging_int_rec {
        receives send
    }
    
    function onOpen() @override "true"
    do
        lifecycle!onOpen()
    end   
    
    function onClose() @override "true"
    do
        lifecycle!onClose()
    end
    
    function onError(msg : String) @override "true"
    do
        err!onError(msg)
    end
    
    function onMessage(msg : String) @override "true"
    do
        messaging_int_send!send(msg)
        messaging!onMessage(msg)
    end
    
    statechart behavior init Init {
    
        state Init {
            
            on entry do
                'org.java_websocket.WebSocketImpl.DEBUG = true;'
                print("\tPORT: " + _port)
                server = 'new org.thingml.utils.WSServer(' & _port & ', root.asInstanceOf[org.thingml.utils.WSServerObserver])'
            end
            
            transition -> Started
            
        }
        
        state Started {
            
            on entry '' & server & '.start();'
            
            internal event s : messaging_int_rec?send
            action '' & server & '.send(' & s.msg & ');'
            
            transition -> Stopped
            event lifecycle?stop
            
        }
        
        state Stopped {
            
            on entry '' & server & '.stop();'
            
            transition -> Started
            event lifecycle?start
            
        }
                
    }
}


configuration WSServer {
    instance server : WebSocketServerScala    
        set server._port = "7681"

    connector server.messaging_int_rec => server.messaging_int_send
}