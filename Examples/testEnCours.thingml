datatype Integer
    @js_type "short";

thing fragment TestMsgs {
    message msg1();
    message msg2();
    message msg3();
    message changeState1();  
    message changeState2(); 
    message changeState3(); 
    message testIn(c : Integer);
}

thing TestMixStreamsAndEvent includes TestMsgs
@test "ab # 12"
@test "ac # 13"
@test "ad # 14"
{
    provided port providedService {
        sends msg1, msg2, msg3, changeState1, changeState2, changeState3, testIn
    }
    
    required port requiredService {
        receives msg1, msg2, msg3, changeState1, changeState2, changeState3, testIn
    }
    
    property count : Integer = 0
    
  statechart TestInit init S3 {
        composite state S3 init S1 {
            internal 
            stream s from event requiredService?testIn
            trigger s->c == '\'s\''
            action print "s"
            
            state S1 {
                on entry print "1"
                
                internal 
                stream s from event requiredService?testIn
                trigger s->c == '\'a\''
                action print "a"
                
                transition -> S2
                event e : requiredService?testIn
                guard e.c == '\'b\''
            }
            
            state S2 {
                on entry print "2"
                
                internal 
                event e : requiredService?testIn
                guard (1== '1' and not(1>5 and 1==-5) and (1 == 2 or 2==2) and e.c == '\'s\'')
                action print "A"
                
                internal 
                stream s from event requiredService?testIn
                trigger s->c == '\'B\''
                action print "B"
            }  
        }
	}
}

configuration testCfg {
    instance test : TestMixStreamsAndEvent
    connector test.requiredService => test.providedService
}