datatype Integer
    @js_type "short";
        
thing fragment TestsMsgs {
    message msg1(titou : Integer);
    message msg2(titou : Integer);
}

thing TestJoinStream includes  TestsMsgs
{
    provided port providedService {
        sends msg1, msg2
    }
    
    required port requiredService {
        receives msg1, msg2  
    }
    
    function joinMethod(vMsgs1 : Integer, vMsgs2 : Integer) : Integer do
       var tmp1 : Integer = vMsgs1
       var tmp2 : Integer = vMsgs2
       print "2/ tmp1 : " + tmp1 + " et tmp2 : " + tmp2
       tmp1 = tmp1 * 2
       print "3/ tmp1 : " + tmp1 + " et tmp2 : " + tmp2
       tmp2 = tmp2 - 4
       print "4/ tmp1 : " + tmp1 + " et tmp2 : " + tmp2
       print "Je suis une carotte pas cuite"
       tmp1 = tmp1 + tmp2 * 2
       print "5/ tmp1 : " + tmp1 + " et tmp2 : " + tmp2
       tmp2 = tmp2 / 10
       print "6/tmp1 : " + tmp1 + " et tmp2 : " + tmp2
       
       return vMsgs1 + vMsgs2
    end
    
    operator toto () {}
    
    statechart TestStreamWithMultipleEvents init Init {
        state Init {
             on entry do
                providedService!msg1(5)
                providedService!msg2(3)
            end
            
            transition -> End
            @stream "join(1,2,10,joinMethod)"
            event e1 : requiredService?msg1
            event e2 : requiredService?msg2
            

        }
        
        state End {
            on entry  print "ok"   
        }
    }
}

configuration joinCfg {
    instance test : TestJoinStream
    connector test.requiredService => test.providedService    
}