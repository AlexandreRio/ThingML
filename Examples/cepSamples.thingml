/*
Expected result : 
> npm install
> node main.js
Init
cep message receive.
cep2 message receive with values (8;24).
cep2 message receive with values (21;25).
cep3 message receive.
cep3 message receive.
cep4 message receive with values (1;2;3).
cep4 message receive with values (4;5;6).
cep5 message receive with values (10;40;90).
*/

datatype Integer
    @js_type "short";
    
thing fragment CepMsgs {
    //Cep messages for "simple" streams
    message cep1();
    message cep2(val1 : Integer, val2 : Integer);
    
    //CEP messages for merged streams
    message cep3();
    message cep4(a : Integer, b : Integer, c : Integer);
    
    //CEP messages for joined streams
    message cep5(a : Integer, b : Integer, c : Integer);
}

thing fragment SampleMsgs {
    // Messages receive by "simple" streams
    message m1();
    message m2(v1 : Integer, v2 : Integer);  
    
    //Messages receive by merged streams
    message m3();  
    message m4();
    message m5(x : Integer, y : Integer, z : Integer);  
    message m6(value1 : Integer, value2 : Integer, value3 : Integer);
    
    // Messages receive by joined streams
    message m7(a : Integer, b : Integer, c : Integer);  
    message m8(v1 : Integer, v2 : Integer, v3 : Integer);
}

thing Sample includes CepMsgs,  SampleMsgs{
    provided port sendPort {
        sends m1, m2, m3, m4, m5, m6, m7, m8, cep1, cep2, cep3, cep4, cep5
    }
    
    required port rcvPort {
        receives m1, m2, m3, m4, m5, m6, m7, m8, cep1, cep2, cep3, cep4, cep5
    }
    
    function complexTransforming(value : Integer) : Integer do
        return value + 1
    end
    
    stream forwardSimpleMessage do
        from rcvPort?m1
        action sendPort!cep1()
    end
    
    stream forwardMessageWithParams do
        from evt : rcvPort?m2
        select a : evt.v1, b : evt.v2
        action sendPort!cep2(a,b)
    end
    
    stream transformingMessageValue do
        from evt : rcvPort?m2
        select a : (evt.v1 * 2) + 5, b : complexTransforming(evt.v2)
        action sendPort!cep2(a,b)
    end
    
    stream mergedSimpleMessages do
        from rcvPort?m3 | rcvPort?m4
        action sendPort!cep3()
    end
    
    stream mergeMessagesWithValues do
        from rcvPort?m5 | rcvPort?m6
        select a : #0, b: complexTransforming(#1), c: (#2 * 2) + 5
        action sendPort!cep4(a,b,c)
    end
    
    stream joinMessages do
        from e1 : rcvPort?m7 & e2 : rcvPort?m8
        select a : e1.a * e2.v1, b : e1.b * e2.v2, c : e1.c * e2.v3
        action sendPort!cep5(a,b,c)
    end
    
    
    statechart Sample init Init {
        state Init {
            on entry do
                print "Init"
                sendPort!m1()
                sendPort!m2(8,24)
                
                sendPort!m3()
                sendPort!m4()
                
                sendPort!m5(1,2,3)
                sendPort!m6(4,5,6)
                
                sendPort!m7(1,2,3)
                sendPort!m8(10,20,30)
            end
            
            internal
            event rcvPort?cep1
            action print "cep message receive." 
                        
            internal 
            event e : rcvPort?cep2
            action print "cep2 message receive with values (" + e.val1 + ";" + e.val2 +")."
            
            internal
            event rcvPort?cep3
            action print "cep3 message receive."
            
            internal
            event e : rcvPort?cep4
            action print "cep4 message receive with values (" + e.a + ";" + e.b + ";" + e.c + ")."
            
            internal
            event e : rcvPort?cep5
            action print "cep5 message receive with values (" + e.a + ";" + e.b + ";" + e.c + ")."
            
        }    
    }
    
}

configuration sampleCfg {
    instance sample : Sample
    connector sample.rcvPort => sample.sendPort    
}
