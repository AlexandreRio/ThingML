datatype Double 
    @js_type "double";

thing fragment SenderMsgs {
    message forwardMessage();
    message forwardMessageWithParams(p1 : Double, p2 : Double, p3 : Double, p4 : Double, p5 : Double);
    message forwardWithModif(p1 : Double, p2 : Double, p3 : Double, p4 : Double, p5 : Double);
    
    message endBench();
    message redo();
}

thing Sender includes SenderMsgs {
    required port senderCepService {
        sends forwardMessage, forwardMessageWithParams, forwardWithModif, endBench
    }
    
    required port senderService {
        sends forwardMessage, forwardMessageWithParams, forwardWithModif, endBench
        receives redo
    }
        
    property initRedo : Double = 10000
    property nbIter : Double = 10000
    property redo : Double = 10000
    
    statechart Sender init Init {        
        state Init {
         on entry do
            var i :Double = 0
            if(redo == initRedo) do
               'console.log("START TIME C : " + process.hrtime());'
            end
            while (i<nbIter) do
                senderService!forwardMessage()
                senderService!forwardMessageWithParams(1,2,3,4,5)
                senderService!forwardWithModif(1,2,3,4,5)
                i = i + 1
            end
            senderService!endBench()
            redo = redo - 1
            print "Redo = " + redo
         end  
         
         transition -> Idle  
        }
        
        state Idle {
            transition -> Init
            event senderService?redo
            guard redo > 0
            
            transition -> End
            event senderService?redo
            guard redo == 0
        }
        
        state End {
            on entry do
                'console.log("END TIME C : " + process.hrtime());' 
                print "Bye"   
            end 
        }
    }
}
