/*
 * Copyright (C) 2014 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* global describe, it */
var assert = require("assert"),
	state = require("../lib/state.com.js");
	
var model = new state.StateMachine( "model" );

var initial = new state.PseudoState("initial", model, state.PseudoStateKind.Initial);
var ortho = new state.State("ortho", model);
var simple = new state.State("simple", model);
var final = new state.FinalState("final", model);

var r1 = new state.Region("r1", ortho);
var r2 = new state.Region("r2", ortho);

var i1 = new state.PseudoState("initial", r1, state.PseudoStateKind.ShallowHistory);
var i2 = new state.PseudoState("initial", r2, state.PseudoStateKind.ShallowHistory);

var s1 = new state.State("s1", r1);
var s2 = new state.State("s2", r2);

var f1 = new state.FinalState("f1", r1);
var f2 = new state.FinalState("f2", r2);

initial.to(ortho);

i1.to(s1);
i2.to(s2);

ortho.to(final); // This should happen once all regions in ortho are complete?

s1.to(f1).when(function(c) {
    return c === "complete1";
});

s2.to(f2).when(function(c) {
    return c === "complete2";
});

ortho.to(simple).when(function(c) {
    return c === "jump";
});

simple.to(ortho).when(function(c) {
    return c === "back";
});

var instance = new state.StateMachineInstance("instance");				
state.initialise(model, instance);

describe("test/muximise.js", function () {
	describe("State type tests", function () {
		it("State.isSimple", function () {
			assert(true, simple.isSimple());
		});

		it("State.isComposite", function () {
			assert(true, ortho.isComposite());
		});

		it("State.isOrthogonal", function () {
			assert(true, ortho.isOrthogonal());
		});
	});
	
	describe("Orthogonal state completion", function () {
		it("Completion transition fires once all regions of an orthogonal state are complete", function(){
			state.evaluate(model, instance, "complete1");
			state.evaluate(model, instance, "complete2");
		
			assert.equal(true, state.isComplete(model, instance));
		});
	});
});