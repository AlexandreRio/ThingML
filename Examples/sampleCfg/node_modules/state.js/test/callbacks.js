/*
 * Copyright (C) 2014 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* global describe, it */
var assert = require("assert"),
	state = require("../lib/state.com.js");

var instance = new state.StateMachineInstance("test");
instance.calls = 0;
instance.logs = 0;

var model = new state.StateMachine("model").setLogger({ log: function (text) { instance.logs++; } });
var initial = new state.PseudoState("initial", model, state.PseudoStateKind.Initial);
var stateA = new state.State("stateA", model).exit(function (message, instance) {instance.calls += 1;} );
var stateB = new state.State("stateB", model).entry(function (message, instance) {instance.calls += 2;});

initial.to(stateA);
stateA.to(stateB).when(function (message) { return message === "move"; }).effect(function (message, instance) {instance.calls += 4;});

state.initialise(model, instance);

state.evaluate(model, instance, "move");

describe("test/callbacks.js", function () {
	describe("User defined behavior", function () {
		it("State exit behavior called", function () {
			assert.equal(1, 1 & instance.calls);
		});
		
		it("State entry behavior called", function () {
			assert.equal(2, 2 & instance.calls);
		});
		
		it("State transition behavior called", function () {
			assert.equal(4, 4 & instance.calls);
		});
	});
	
	describe("Custom logging", function () {
		it("Logger called during initialisation and state transitions", function () {
			assert.equal(10, instance.logs);
		});
	});
});

