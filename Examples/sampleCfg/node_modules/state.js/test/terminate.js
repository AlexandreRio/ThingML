/*
 * Copyright (C) 2014 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* global describe, it */
var assert = require("assert"),
	state = require("../lib/state.com.js");

var model = new state.StateMachine("model").setLogger(console);
var initial = new state.PseudoState("initial", model);
var stateA = new state.State("stateA", model);
var terminate = new state.PseudoState("terminate", model, state.PseudoStateKind.Terminate);

initial.to(stateA);
stateA.to(terminate).when(function(message) { return message === 1; });

var instance = new state.StateMachineInstance("instance");

state.initialise(model, instance);

describe("test/terminate.js", function () {
	describe("State machine termination", function () {
		it("Message that doesn't trigger any transitions returns false", function(){
			assert.equal(false, state.evaluate(model, instance, 2));
		});
		
		it("Message that does trigger a transitions returns true", function(){		
			assert.equal(true, state.evaluate(model, instance, 1));
		});
		
		it("Messages after a terminate is reached are not evaluated", function(){		
			assert.equal(false, state.evaluate(model, instance, 1));
		});
		
		it("Instance is marked as terminted", function(){		
			assert.equal(true, instance.isTerminated);
		});	
	});	
});