/*
 * Copyright (C) 2014 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* global describe, it */
var assert = require("assert"),
	state = require("../lib/state.com.js");

var model = new state.StateMachine("compTest").setLogger();
var initial = new state.PseudoState("initial", model, state.PseudoStateKind.Initial);

var activity1 = new state.State("activity1", model);
var activity2 = new state.State("activity2", model);
var activity3 = new state.State("activity3", model);
var junction1 = new state.PseudoState("junction1", model, state.PseudoStateKind.Junction);
var junction2 = new state.PseudoState("junction2", model, state.PseudoStateKind.Junction);
var end = new state.FinalState("end", model);

var subInitial = new state.PseudoState("subInitial", activity2, state.PseudoStateKind.Initial);
var subEnd = new state.FinalState("subEnd", activity2);

subInitial.to(subEnd);
initial.to(activity1);
activity1.to(activity2);
activity2.to(junction1);
junction1.to(junction2);
junction2.to(activity3);
activity3.to(end);

var instance = new state.StateMachineInstance("instance");
state.initialise(model, instance);

describe("test/transitions.js", function () {
	it("Completion transitions should be triggered by state entry", function(){
		assert.equal(true, state.isComplete(model, instance));
	});
});