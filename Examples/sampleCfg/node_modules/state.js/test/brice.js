/*
 * Copyright (C) 2014 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* global describe, it */
var assert = require("assert"),
	state = require("../lib/state.com.js");

var model = new state.StateMachine("model");
var initial1 = new state.PseudoState("initial", model, state.PseudoStateKind.Initial);
var myComposite1 = new state.State("composite1", model);
var state3 = new state.State("state3", model);
var initial2 = new state.PseudoState("initial", myComposite1, state.PseudoStateKind.Initial);
var state1 = new state.State("state1", myComposite1);
var state2 = new state.State("state2", myComposite1);

initial1.to(myComposite1);
initial2.to(state1);
myComposite1.to(state3).when(function(c) { return c === "a";});
state1.to(state2).when(function(c) { return c === "a";});

var instance = new state.StateMachineInstance();
state.initialise(model, instance);

describe("test/brice.js", function () {
	it("Transitions should be selected depth-first", function(){
		state.evaluate(model, instance, "a");
		
		assert.equal(state2, instance.getCurrent(myComposite1.defaultRegion()));
	});
});