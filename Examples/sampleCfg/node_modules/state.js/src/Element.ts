/*
 * Finite state machine library
 * Copyright (c) 2014-5 Steelbreeze Limited
 * Licensed under the MIT and GPL v3 licences
 * http://www.steelbreeze.net/state.cs
 */
module StateJS {
	/**
	 * An abstract class used as the base for the Region and Vertex classes.
	 * An element is any part of the tree structure that represents a composite state machine model.
	 * @class Element
	 */
	export class Element {
		/**
		 * The symbol used to separate element names within a fully qualified name.
		 * Change this static member to create different styles of qualified name generated by the toString method.
		 * @member {string}
		 */
		public static namespaceSeparator = ".";
		
		/**
		 * The name of the element.
		 * @member {string}
		 */
		public name: string;
		
		/**
		 * The fully qualified name of the element.
		 * @member {string}
		 */
		public qualifiedName: string;
	
		/**
		 * Creates a new instance of the element class.
		 * @param {string} name The name of the element.
		 */
		public constructor(name: string) {
			this.name = name;
		}
	
		/**
		 * Returns the parent element of this element.
		 * @method getParent
		 * @returns {Element} The parent element of the element.
		 */
		public getParent(): any {
		}
	
		/**
		 * Returns the root element within the state machine model.
		 * @method getRoot
		 * @returns {StateMachine} The root state machine element.
		 */
		public getRoot(): StateMachine {
			return this.getParent().getRoot();
		}
	
		// The ancestors are returned as an array of elements, staring with the root element and ending with this elemenet.
		ancestors(): Array<Element> {
			return (this.getParent() ? this.getParent().ancestors() : []).concat(this);
		}
	
		/**
		 * Accepts an instance of a visitor.
		 * @method accept
		 * @param {Visitor<TArg>} visitor The visitor instance.
		 * @param {TArg} arg An optional argument to pass into the visitor.
		 * @returns {any} Any value can be returned by the visitor.
		 */
		public accept<TArg1>(visitor: Visitor<TArg1>, arg1?: TArg1, arg2?: any, arg3?: any): any { /* virtual method */ }
	
		/**
		 * Returns a the element name as a fully qualified namespace.
		 * @method toString
		 * @returns {string}
		 */
		public toString(): string {
			return this.qualifiedName;
		}
	}
}