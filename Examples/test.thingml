datatype Integer
    @js_type "short";

thing fragment Demo1Msgs {
    message m1(v1 : Integer, v2 : Integer);
    message m2(val1 : Integer, val2 : Integer);
    message m3();
    
    message cep(x: Integer, y: Integer);
}

thing Demo1 includes Demo1Msgs{
    required port receiveService {
        receives m1, m2, m3, cep
    }
    
    provided port sendService {
        sends m1, m2, m3, cep
    }
    
    function toto () : Integer do
        return 56
    end 
    
    function toto2 (x : Integer, y:Integer, z : Integer, w : Integer ) : Integer do
        return x + y + z + w
    end 
    
    stream simpleStream do
        /*input : e : receiveService?m2, e1 : receiveService?m1
        output : sendService!cep((e.val1 + e1.v1) * 2 - (e.val2 / e1.v2) + toto())// ,toto2(e.val1,e.val2,e1.v1,e1.v2),0)*/
        select a : (e.val1 + e1.v1) * 2 - (e.val2 / e1.v2) + toto(), b : toto2(e.val1,e.val2,e1.v1,e1.v2)
        from e : receiveService?m2, e1 : receiveService?m1
        action : sendService!cep(a,b)
    end
       
    statechart Demo1 init S1 {
        state S1 {
            on entry do
                print "Entry S1"
                sendService!m1(5,7)
                sendService!m2(2,5)
                sendService!m3()
            end
             
            internal
            event e : receiveService?cep
            action print "YouYou " +  e.x + "; " + e.y     
        }
    }
    
}

configuration demo1Cfg {
    instance demo : Demo1
    connector demo.receiveService => demo.sendService    
}
