datatype Integer
    @java_type "int";
    
thing fragment Message {
    message m1(v1 : Integer, v2 : Integer, v3 : Integer);  
    message cep(v1 : Integer, v2 : Integer, v3 : Integer, v4 : Integer);  
    
    message go();
}

thing Sender includes Message {
    provided port service {
        sends m1    
    }
    
    statechart Sender init Init {
        state Init {
            on entry do 
                print "Sender :: Init"
                service!m1(1,2,3)
            end
            
            transition -> Bye              
        }    
        
        state Bye {
            on entry print "Sender :: Bye"    
        }
    }    
}

thing Stream includes Message {
    required port service {
        receives m1 
        sends cep   
    }
    
    function f(x : Integer, y : Integer, z : Integer) : Integer do
        return x + y + z
    end
    
    stream simpleFw do
        from e : service?m1
        select a : e.v1, b : e.v2, c : (5 + 1) / (1 * e.v3), d : f(e.v1,e.v2,e.v3)
        action service!cep(a,b,c,d)
    end
    
    statechart Stream init Init {
        state Init{
            /*internal
            event service?m1 
            action service!cep()*/  
        }    
    }
}

thing Receiver includes Message {
    
    provided port service {
        receives cep    
    }
      
    statechart Receiver init Idle {
        state Idle {
            on entry print "Receiver :: Idle"
            
            transition -> Bye
            event evt : service?cep  
            action print evt.v1 + "; " + evt.v2 + "; " + evt.v3 + "; " + evt.v4
        } 
        
        state Bye {
            on entry print "Receiver :: Bye"    
        }   
    }  
}

configuration testCfg {
    instance r : Receiver
    instance s : Sender
    instance st : Stream
    
    connector st.service => s.service
    connector st.service => r.service
}
