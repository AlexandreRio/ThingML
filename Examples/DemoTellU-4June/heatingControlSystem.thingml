datatype Integer
    @js_type "short";
    
datatype Boolean;

thing fragment HeatingMsgs {
    message heatingValue(tempF : Integer);    
    message cHeatingV(tempC : Integer);
    message hNotification();
}

thing Heating includes HeatingMsgs {
    provided port sendService {
        sends heatingValue, cHeatingV, hNotification
    }
    
    required port rcvService {
        receives heatingValue, cHeatingV 
    }
    
    function fahrenheitToCelsius(v : Integer) : Integer do
        return (v - 32) / 2
    end
    
    stream transformTemp do
        from evt : rcvService?heatingValue
        select tempC : fahrenheitToCelsius(evt.tempF)
        action sendService!cHeatingV(tempC)
    end
    
    statechart Heating init Idle {
        state Idle {
            on entry sendService!heatingValue(73)
            
            internal
            event e : rcvService?cHeatingV
            action do 
                print "Temperature receive : " + e.tempC
                sendService!hNotification()
            end
        }    
    }
}

thing fragment WindowIsOpenMsgs {
    message window1IsOpen();
    message window2IsOpen();  
    
    message aWindowIsOpen();  
    
    message wNotification();
}

thing WindowIsOpened includes WindowIsOpenMsgs {
    provided port sendService {
        sends window1IsOpen, window2IsOpen, aWindowIsOpen, wNotification
    }
    
    required port rcvService {
        receives window1IsOpen, window2IsOpen, aWindowIsOpen, wNotification 
    }
    
    stream aWindowIsOpen do
        from rcvService?window1IsOpen | rcvService?window2IsOpen
        action sendService!aWindowIsOpen()
    end
    
    statechart WindowIsOpened init Idle {
        state Idle {
            on entry do
                sendService!window1IsOpen()
                sendService!window2IsOpen()
            end 
            
            internal
            event rcvService?aWindowIsOpen
            action do
                print "A window is open..."
                sendService!wNotification()
            end  
        }    
    }
}

thing fragment PersonIsPresentMsgs {
    message humidity(value : Integer);
    message light(val : Integer);
    
    message cPersonIsPresent(val : Boolean);  
    
    message pNotification();
}

thing PersonIsPresent includes PersonIsPresentMsgs {
    provided port sendService {
        sends humidity, light, cPersonIsPresent, pNotification
    }
    
    required port rcvService {
        receives humidity, light, cPersonIsPresent
    }
    
    stream personIsPresent do
        from h : rcvService?humidity & l : rcvService?light
        select p : h.value > 10 and l.val > 20
        action sendService!cPersonIsPresent(p)
    end
    
    statechart PersonIsPresent init Idle {
        state Idle {
            on entry do
                sendService!humidity(20)
                sendService!light(25)
            end
            
            internal 
            event e : rcvService?cPersonIsPresent
            action do
                if(e.val) do
                       print "Is someone in the room? : " + e.val
                    sendService!pNotification()
                 end
            end
        }
    }
}

thing HeatingControlSystem includes HeatingMsgs, WindowIsOpenMsgs, PersonIsPresentMsgs {
    required port rcvService {
        receives hNotification, wNotification, pNotification
    }
    
    statechart HeatingControlSystem init Idle {
        state Idle {
            internal
            event rcvService?hNotification
            action print "System : the heating is on max" 
            
            internal
            event rcvService?wNotification
            action print "System : at least one window is open" 
            
            internal
            event rcvService?pNotification
            action print "System : at least one person is in the room"   
        }    
    }
    
}



configuration heatingControlSystemCfg {
    instance heating : Heating
    instance systeme : HeatingControlSystem
    instance window : WindowIsOpened
    instance person : PersonIsPresent
    
    connector heating.rcvService => heating.sendService  
    connector systeme.rcvService => heating.sendService  
    connector window.rcvService => window.sendService
    connector systeme.rcvService => window.sendService 
    connector person.rcvService => person.sendService
    connector systeme.rcvService => person.sendService 
}
