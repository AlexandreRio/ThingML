import "../datatypes.thingml"


/*****************************************************************************
 * Definition of the built-in things and messages
 *****************************************************************************/
 
thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

thing fragment Timer includes TimerMsgs
{
	provided port timer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
}

thing fragment TimerClient includes TimerMsgs
{
	required port timer
    {
		receives timer_timeout
		sends timer_start, timer_cancel
	}
    
}

thing SimpleTimerClient includes TimerClient 
{
    statechart Default init Tick {
        
        property counter : Integer = 0
        
        state Tick {
            on entry 
            do
                timer!timer_start(1000)
            end
            
            
            transition tock -> Tick
            event timer?timer_timeout
            guard counter%2 == 0
            action do 
                print("tick")
                print(counter)
                counter = counter + 1
            end
            
            internal event tick : timer?timer_timeout
            guard counter%2 == 1
            action do
                print("tock")
                print(counter)
                counter = counter + 1
                timer!timer_start(5000)
            end
        }         
           
    }   

}