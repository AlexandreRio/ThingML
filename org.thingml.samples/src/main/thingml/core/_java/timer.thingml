import "../timer.thingml"

datatype JavaTimer
@java_type "java.util.Timer";

datatype JavaTimerTask
@java_type "java.util.TimerTask";

// Manage a set of software timers.
thing TimerJava includes Timer
@pim "Timer"
@platform "java"
@java_interface "org.thingml.timer.TimerObserver"
@thingml_maven_dep "org.thingml.utils"
{

    readonly property javaTimer : JavaTimer = 'new java.util.Timer()'
    property javaTimerTask : JavaTimerTask

    function onTimeout()@override "true" 
    do
        //print("timeout")
        timer!timer_timeout()
    end
    
    function cancel() 
    do
      //print("cancel")
      if(not (javaTimerTask == 'null'))
      do
        '' & javaTimerTask & '.cancel();'
        '' & javaTimerTask & ' = null;'
      end
      '' & javaTimer & '.purge();'
    end
    
    function start(delay : Integer)
    do
        //print("start " + delay)
        cancel()
        javaTimerTask = 'new org.thingml.timer.ThingMLTimerTask(this)'
        '' & javaTimer & '.schedule(' & javaTimerTask & ', (long)' & delay & ');'
    end
    
    statechart SoftTimer init default {
        state default {
          //on entry print("debug timer on entry")
            
          internal start
            event m : timer?timer_start
            guard m.delay > 0
            action do
                //print("debug timer")
                start(m.delay)
            end
            
          internal cancel
            event m : timer?timer_cancel
            action cancel()    
        }
    }
}

thing TimerClientJava includes TimerClient 
{
    statechart Default init Tick {
        
        property counter : Integer = 0
        
        state Tick {
            on entry 
            do
                timer!timer_start(1000)
            end
            
            
            transition tock -> Tick
            event timer?timer_timeout
            guard counter%2 == 0
            action do 
                print("tick")
                print(counter)
                counter = counter + 1
            end
            
            internal event tick : timer?timer_timeout
            guard counter%2 == 1
            action do
                print("tock")
                print(counter)
                counter = counter + 1
                timer!timer_start(5000)
            end
        }         
           
    }   

}

configuration TestTimerJava {
    instance timer : TimerJava
    instance client : TimerClientJava
    connector client.timer => timer.timer    
}