/* ThingML Framework */

import "../comm.thingml"

datatype SerialPhy
@scala_type "org.thingml.utils.comm.Serial";

//datatype CoAPPhy
//@scala_type "org.thingml.utils.comm.CoAP";

thing fragment CoAPScala includes IOByteArray
@pim "IOStream"
@platform "scala"
@scala_trait "org.thingml.utils.comm.CoAPThingML"
@thingml_maven_dep "org.thingml.utils"
{
    readonly property coapPort : Long = 61616//currently not used...

    /*
     * This function creates the real COaP server that this thing interfaces with    
     * This function NUST be overriden (with @override "true" in a concrete thing
     */
    function initialize()@abstract "true"do end
        
    function receive(byte : Byte[256]) 
    @override "true"
    do
        print('' & "COaPScala receive: " + byte & '.mkString("[", " ", "]")')
        IOStream!receive_bytes(byte)
    end
    
    statechart behavior init default {
        on entry 
        do
            initialize()
        end
        
        state default {
            internal event wb : IOStream?write_bytes
            action do
                print("coap.sendData: " + wb.b)
                'root.asInstanceOf[org.thingml.utils.comm.CoAPThingML].sendData(' & wb.b & ')'
            end
        }    
    }
}

thing SerialScala includes IOByteArray
@pim "IOStream"
@platform "scala"
@scala_trait "org.thingml.utils.comm.SerialThingML"
@thingml_maven_dep "org.thingml.utils"
{
    readonly property serialPort : String = "COM8"
    property serial : SerialPhy  
        
	function receive(byte : Byte[256]) 
    @override "true"
    do
        IOStream!receive_bytes(byte)
    end

    statechart behavior init default {
        on entry 
        do
            serial = 'new org.thingml.utils.comm.Serial(' & serialPort & ', root.asInstanceOf[org.thingml.utils.comm.SerialThingML])'
        end
        
        state default {
            internal event wb : IOStream?write_bytes
            action do
                print("serial.write: " + wb.b)
                'root.asInstanceOf[org.thingml.utils.comm.SerialThingML].sendData(' & wb.b & ')'
            end
        }    
    }    
}