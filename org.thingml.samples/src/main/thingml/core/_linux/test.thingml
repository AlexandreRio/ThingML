import "../test.thingml"
datatype double
@c_type "double";

thing TestDumpLinux includes TestDump
@c_header "#include <stdio.h>
#include <sys/time.h>"
@c_global "FILE* testFile = NULL;
FILE* cpuFile = NULL;"
{
 	property benchmark: Boolean = false
 	//property start: double = 0
 	//property stop: double = 0
	function write(c : Char) 
	do
		
    'if (testFile != NULL)
    {
        fprintf(testFile,"%c",c); 
    }
	printf("%c\n",c);'
 
	end
	function writeString(s : String) 
	do
		
	if (benchmark == false)  do 
	'printf("%s\n",s);' 
	
    'if (testFile != NULL)
    {
        fprintf(testFile,"%s\n",s); 
    }'
	end
	end
	
	statechart LinuxHarness init Testing {
		property transitionsCount : Long = 0
 	    property stateNumber: String = ""
        property time : LongLong = 0
		
		state Testing {
            on entry do 
            	'testFile = fopen("dump", "w+");'
   				'sleep(2);'
				/*'struct timeval t;'
				'gettimeofday(&t, NULL);'
				''&start&'= ((double)t.tv_sec) * 1000.0 + ((double)t.tv_usec) / 1000.0;'*/
            end
            internal event m : dump?testOut
            action do write(m.c)
            	transitionsCount=transitionsCount+1
            end
            internal event m : dump?perfTestOut
            action do //writeString(m.s)
            	transitionsCount=transitionsCount+1
            end
            
            transition -> Failed 
            event dump?testFailure
            action 'printf("*FAILURE*");'
            
            
            transition -> End
            event m : dumpEnd?testEnd
/*            action do 
			'struct timeval t;'
			'gettimeofday(&t, NULL);'
			''&stop&'= ((double)t.tv_sec) * 1000.0 + ((double)t.tv_usec) / 1000.0;'
            //time = m.time
		    end
  */          
            transition -> End
            event m: dumpEnd?perfTestSize
            action do 
			/*'struct timeval t;'
			'gettimeofday(&t, NULL);'
			''&stop&'= ((double)t.tv_sec) * 1000.0 + ((double)t.tv_usec) / 1000.0;'*/
            time = m.time
		    'if (testFile != NULL)
		    {
		        fprintf(testFile,"%s\n",'&m.s&'); 
		    }'
		    end
		}
		
		state Failed {

		}
		
		state End {
			on entry do
'
cpuFile = fopen("cputime", "w+");
if (cpuFile != NULL)
		    {
		        fprintf(cpuFile,"%li\n",'&time&'); 
		    }
char cmd[80];
sprintf(cmd, "ps -p %d -o %ccpu > stats",getpid(),\'%\');
system(cmd);
sprintf(cmd, "ps -p %d -o %cmem >> stats",getpid(),\'%\');
system(cmd);'
'sprintf(cmd, "echo \"%d\" > transitionsCount",' & transitionsCount & ');'
'system(cmd);
sprintf(cmd, "echo \"%f\" > cputime",'&time&');'
'system(cmd);
fclose(testFile);
//ProfilerStop();
exit(0);'
			end
		}
	}
}