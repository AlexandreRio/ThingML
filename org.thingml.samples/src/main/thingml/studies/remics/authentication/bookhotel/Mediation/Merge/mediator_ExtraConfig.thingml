/*
* This is a mediator for Configratrion(ExtraConfig) generated automatically
* by Runze Hao (haoshaochi@gmail.com)
*/
import "Configs.thingml"
thing Mediator_ExtraConfig includes ControlMessage,Logger,MergeMessage
{
property msg_rSpM1 : Integer = 0
property msg1_rSpM1 : String = ""
property msg2_rSpM1 : String = ""
property msg3_rSpM1 : String = ""
provided port PrvPort_ExtraConfig_c1_Toserver {
receives rRequest,inputID,rSpM1_1,rSpM1_2,rSpM1_3
sends rReply_,idReply,rSpM1_re,rSpM1_1_re,rSpM1_2_re
}
required port ReqPort_ExtraConfig_s1_Toclient {
sends rRequest,inputID,rSpM1
receives rReply,idReply,rSpM1_re
}
provided port PrvPort_Control{
receives startMsg, stopMsg
}
statechart Mediator init Ready {
state Ready{
on entry do
clearlog()
print "Ready, Waiting for startMsg trigger"
end
transition->Working
event e:PrvPort_Control?startMsg
action do
print " start!"
log("@startuml")
log("autonumber \"<b>[000]\"")
log("participant Mediator_ExtraConfig <<(M,#EEEEEE)>> #99FF99")
end
}
state Working{
on entry do
print "enter working state"
end
on exit do
print "exit working state"
end

transition-> Ready
event e: PrvPort_Control?stopMsg

action do
log("@enduml")
printlog()
writeFile()
end

internal
event e: PrvPort_ExtraConfig_c1_Toserver?rRequest
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rRequest("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!rRequest(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : rRequest("+"\""+e.msg+"\""+")")
end
internal
event e: PrvPort_ExtraConfig_c1_Toserver?inputID
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : inputID("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!inputID(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : inputID("+"\""+e.msg+"\""+")")
end
transition -> MergeState_rSpM1_1
event e: PrvPort_ExtraConfig_c1_Toserver?rSpM1_1
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rSpM1_1("+e.msg+","+"\""+e.msg1+"\""+")")
msg_rSpM1= e.msg
msg1_rSpM1= e.msg1
PrvPort_ExtraConfig_c1_Toserver!rSpM1_1_re(true)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : rSpM1_1_re(true)")
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?rReply
action do
log("\"ExtraConfig_s1:Server\" -> Mediator_ExtraConfig : rReply("+"\""+e.msg+"\""+")")
transformrReply_ReqPort_ExtraConfig_s1_Toclient(e.msg)
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?idReply
action do
log("\"ExtraConfig_s1:Server\" -> Mediator_ExtraConfig : idReply("+e.msg+")")
PrvPort_ExtraConfig_c1_Toserver!idReply(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : idReply("+e.msg+")")
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?rSpM1_re
action do
log("\"ExtraConfig_s1:Server\" -> Mediator_ExtraConfig : rSpM1_re("+e.msg+")")
PrvPort_ExtraConfig_c1_Toserver!rSpM1_re(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : rSpM1_re("+e.msg+")")
end
}
state MergeState_rSpM1_1{
transition -> MergeState_rSpM1_2
event e: PrvPort_ExtraConfig_c1_Toserver?rSpM1_2
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rSpM1_2("+e.msg2+")")
PrvPort_ExtraConfig_c1_Toserver!rSpM1_2_re()
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : rSpM1_2_re()")
var msg1339813644 :String = ''&e.msg2&'.toString'
msg2_rSpM1=msg1339813644
end
}
state MergeState_rSpM1_2{
transition -> Working
event e: PrvPort_ExtraConfig_c1_Toserver?rSpM1_3
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rSpM1_3("+"\""+e.msg3+"\""+")")
msg3_rSpM1= e.msg3
ReqPort_ExtraConfig_s1_Toclient!rSpM1(msg_rSpM1,msg1_rSpM1,msg2_rSpM1,msg3_rSpM1)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : rSpM1("+msg_rSpM1+","+"\""+msg1_rSpM1+"\""+","+"\""+msg2_rSpM1+"\""+","+"\""+msg3_rSpM1+"\""+")")
end
}
}
function swallow(m:String) do
print"extra message "+m+" received and swallowed! "
end
function transformrReply_ReqPort_ExtraConfig_s1_Toclient(msg:String) do
var msg2037716241 :String = msg
PrvPort_ExtraConfig_c1_Toserver!rReply_(msg2037716241)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : rReply_("+"\""+msg2037716241+"\""+")")
end
}

thing Logger
@scala_trait "org.thingml.utils.log.Access2File"
@thingml_maven_dep "org.thingml.utils"
{
property trace_buffer :String
function log(trace:String) do
print "==LOG: "+trace+" !=="
trace_buffer = trace_buffer + trace +"\n"
end
function printlog() do
print "====TRACE====\n"
print trace_buffer
end
function clearlog() do
trace_buffer =""
end
function writeFile() do
'this.asInstanceOf[org.thingml.utils.log.Access2File].writeFile(' & trace_buffer & ',"C:/Users/HAOSHA~1/AppData/Local/Temp/ThingML_temp/Config_Logger_ExtraConfig/log_ExtraConfig")'
end
}

thing Control includes ControlMessage
@mock "true"{
required port ControlPort{
sends startMsg, stopMsg
}
}

