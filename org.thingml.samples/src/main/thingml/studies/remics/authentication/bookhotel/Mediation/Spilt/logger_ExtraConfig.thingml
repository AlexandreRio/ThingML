/*
*This is a logger for Configratrion(ExtraConfig) generated automatically
*/
import "Configs.thingml"
thing Logger_ExtraConfig includes ControlMessage,Logger,SplitMessage
{
provided port PrvPort_ExtraConfig_c1_Toserver {
receives rRequest,inputID,rSpM1
sends rReply_,idReply,rSpM1_3_re
}
required port ReqPort_ExtraConfig_s1_Toclient {
sends rRequest,inputID,rSpM1_1,rSpM1_2_,rSpM1_3
receives rReply,idReply,rSpM1_1_re,rSpM1_2_re,rSpM1_3_re
}
provided port PrvPort_Control{
receives startMsg, stopMsg
}
statechart Logger init Ready {
state Ready{
on entry do
clearlog()
print "Ready, Waiting for startMsg trigger"
end
transition->Logging
event e:PrvPort_Control?startMsg
}
state Logging{
on entry do
print "Logger start!"
log("@startuml")
log("autonumber \"<b>[000]\"")
end
on exit do
log("@enduml")
printlog()
writeFile()
end

transition-> Ready
event e: PrvPort_Control?stopMsg

internal
event e: PrvPort_ExtraConfig_c1_Toserver?rRequest
action do
log("\"ExtraConfig_c1:FakeClient\" -> \"ExtraConfig_s1:Server\" : rRequest("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!rRequest(e.msg)
end
internal
event e: PrvPort_ExtraConfig_c1_Toserver?inputID
action do
log("\"ExtraConfig_c1:FakeClient\" -> \"ExtraConfig_s1:Server\" : inputID("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!inputID(e.msg)
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?idReply
action do
log("\"ExtraConfig_s1:Server\" -> \"ExtraConfig_c1:FakeClient\" : idReply("+e.msg+")")
PrvPort_ExtraConfig_c1_Toserver!idReply(e.msg)
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?rSpM1_3_re
action do
log("\"ExtraConfig_s1:Server\" -> \"ExtraConfig_c1:FakeClient\" : rSpM1_3_re("+e.msg+")")
PrvPort_ExtraConfig_c1_Toserver!rSpM1_3_re(e.msg)
end
}
}
}

thing Logger
@scala_trait "org.thingml.utils.log.Access2File"
@thingml_maven_dep "org.thingml.utils"
{
property trace_buffer :String
function log(trace:String) do
print "==LOG: "+trace+" !=="
trace_buffer = trace_buffer + trace +"\n"
end
function printlog() do
print "====TRACE====\n"
print trace_buffer
end
function clearlog() do
trace_buffer =""
end
function writeFile() do
'this.asInstanceOf[org.thingml.utils.log.Access2File].writeFile(' & trace_buffer & ',"C:/Users/HAOSHA~1/AppData/Local/Temp/ThingML_temp/Config_Logger_ExtraConfig/log_ExtraConfig")'
end
}

thing Control includes ControlMessage
@mock "true"{
required port ControlPort{
sends startMsg, stopMsg
}
}

configuration Config_Logger_ExtraConfig{
instance control: Control
instance logger: Logger_ExtraConfig
instance ins_ExtraConfig_s1: Server
instance ins_ExtraConfig_c1: FakeClient
connector control.ControlPort => logger.PrvPort_Control
connector ins_ExtraConfig_c1.Toserver=> logger.PrvPort_ExtraConfig_c1_Toserver
connector logger.ReqPort_ExtraConfig_s1_Toclient=> ins_ExtraConfig_s1.Toclient
}