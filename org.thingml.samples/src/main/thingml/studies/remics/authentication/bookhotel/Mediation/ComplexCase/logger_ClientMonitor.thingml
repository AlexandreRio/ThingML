/*
*This is a logger for Configratrion(ClientMonitor) generated automatically
*/
import "Configs.thingml"
thing Logger_ClientMonitor includes ControlMessage,Logger,Messages
{
provided port PrvPort_ClientMonitor_c1_Toserver {
receives email,userinfo
sends email_ack,welcome
}
required port ReqPort_ClientMonitor_s1_Toclient {
sends email,userinfo
receives email_ack,welcome
}
provided port PrvPort_Control{
receives startMsg, stopMsg
}
statechart Logger init Ready {
state Ready{
on entry do
clearlog()
print "Ready, Waiting for startMsg trigger"
end
transition->Logging
event e:PrvPort_Control?startMsg
}
state Logging{
on entry do
print "Logger start!"
log("@startuml")
log("autonumber \"<b>[000]\"")
end
on exit do
log("@enduml")
printlog()
writeFile()
end

transition-> Ready
event e: PrvPort_Control?stopMsg

internal
event e: PrvPort_ClientMonitor_c1_Toserver?email
action do
log("\"ClientMonitor_c1:FakeClient\" -> \"ClientMonitor_s1:Mockup_Server\" : email("+"\""+e.email+"\""+")")
ReqPort_ClientMonitor_s1_Toclient!email(e.email)
end
internal
event e: PrvPort_ClientMonitor_c1_Toserver?userinfo
action do
log("\"ClientMonitor_c1:FakeClient\" -> \"ClientMonitor_s1:Mockup_Server\" : userinfo("+e.ID+","+"\""+e.username+"\""+","+e.age+")")
ReqPort_ClientMonitor_s1_Toclient!userinfo(e.ID,e.username,e.age)
end
internal
event e: ReqPort_ClientMonitor_s1_Toclient?email_ack
action do
log("\"ClientMonitor_s1:Mockup_Server\" -> \"ClientMonitor_c1:FakeClient\" : email_ack("+e.ack+")")
PrvPort_ClientMonitor_c1_Toserver!email_ack(e.ack)
end
internal
event e: ReqPort_ClientMonitor_s1_Toclient?welcome
action do
log("\"ClientMonitor_s1:Mockup_Server\" -> \"ClientMonitor_c1:FakeClient\" : welcome("+e.ack+","+"\""+e.welcome+"\""+")")
PrvPort_ClientMonitor_c1_Toserver!welcome(e.ack,e.welcome)
end
}
}
}

thing Logger
@scala_trait "org.thingml.utils.log.Access2File"
@thingml_maven_dep "org.thingml.utils"
{
property trace_buffer :String
function log(trace:String) do
print "==LOG: "+trace+" !=="
trace_buffer = trace_buffer + trace +"\n"
end
function printlog() do
print "====TRACE====\n"
print trace_buffer
end
function clearlog() do
trace_buffer =""
end
function writeFile() do
'this.asInstanceOf[org.thingml.utils.log.Access2File].writeFile(' & trace_buffer & ',"C:/Users/HAOSHA~1/AppData/Local/Temp/ThingML_temp/Config_Logger_ClientMonitor/log_ClientMonitor")'
end
}

thing Control includes ControlMessage
@mock "true"{
required port ControlPort{
sends startMsg, stopMsg
}
}

configuration Config_Logger_ClientMonitor{
instance control: Control
instance logger: Logger_ClientMonitor
instance ins_ClientMonitor_s1: Mockup_Server
instance ins_ClientMonitor_c1: FakeClient
connector control.ControlPort => logger.PrvPort_Control
connector ins_ClientMonitor_c1.Toserver=> logger.PrvPort_ClientMonitor_c1_Toserver
connector logger.ReqPort_ClientMonitor_s1_Toclient=> ins_ClientMonitor_s1.Toclient
}