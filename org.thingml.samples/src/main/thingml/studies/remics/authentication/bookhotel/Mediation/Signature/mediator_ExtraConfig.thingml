/*
* This is a mediator for Configratrion(ExtraConfig) generated automatically
* by Runze Hao (haoshaochi@gmail.com)
*/
import "Configs.thingml"
thing Mediator_ExtraConfig includes ControlMessage,Logger,SignatureMessage
{
provided port PrvPort_ExtraConfig_c1_Toserver {
receives rRequest,inputID,rSiM1
sends rReply_,idReply
}
required port ReqPort_ExtraConfig_s1_Toclient {
sends rRequest,inputID,rSiM1_
receives rReply,idReply
}
provided port PrvPort_Control{
receives startMsg, stopMsg
}
statechart Mediator init Ready {
state Ready{
on entry do
clearlog()
print "Ready, Waiting for startMsg trigger"
end
transition->Working
event e:PrvPort_Control?startMsg
action do
print " start!"
log("@startuml")
log("autonumber \"<b>[000]\"")
log("participant Mediator_ExtraConfig <<(M,#EEEEEE)>> #99FF99")
end
}
state Working{
on entry do
print "enter working state"
end
on exit do
print "exit working state"
end

transition-> Ready
event e: PrvPort_Control?stopMsg

action do
log("@enduml")
printlog()
writeFile()
end

internal
event e: PrvPort_ExtraConfig_c1_Toserver?rRequest
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rRequest("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!rRequest(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : rRequest("+"\""+e.msg+"\""+")")
end
internal
event e: PrvPort_ExtraConfig_c1_Toserver?inputID
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : inputID("+"\""+e.msg+"\""+")")
ReqPort_ExtraConfig_s1_Toclient!inputID(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : inputID("+"\""+e.msg+"\""+")")
end
internal
event e: PrvPort_ExtraConfig_c1_Toserver?rSiM1
action do
log("\"ExtraConfig_c1:FakeClient\" -> Mediator_ExtraConfig : rSiM1("+e.msg+","+"\""+e.msg1+"\""+","+e.msg2+","+"\""+e.msg3+"\""+")")
transformrSiM1_PrvPort_ExtraConfig_c1_Toserver(e.msg,e.msg1,e.msg2,e.msg3)
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?rReply
action do
log("\"ExtraConfig_s1:Server\" -> Mediator_ExtraConfig : rReply("+"\""+e.msg+"\""+")")
transformrReply_ReqPort_ExtraConfig_s1_Toclient(e.msg)
end
internal
event e: ReqPort_ExtraConfig_s1_Toclient?idReply
action do
log("\"ExtraConfig_s1:Server\" -> Mediator_ExtraConfig : idReply("+e.msg+")")
PrvPort_ExtraConfig_c1_Toserver!idReply(e.msg)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : idReply("+e.msg+")")
end
}
}
function swallow(m:String) do
print"extra message "+m+" received and swallowed! "
end
function transformrSiM1_PrvPort_ExtraConfig_c1_Toserver(msg:Integer,msg1:String,msg2:Double,msg3:String) do
var msg319530586 :String = ''&msg&'.toString'
var msg11130714052 :Integer = ''&msg1&'.toShort'
var msg2907262573 :String = ""
var msg3252324813 :Integer = ''&msg2&'.toShort'
ReqPort_ExtraConfig_s1_Toclient!rSiM1_(msg319530586,msg11130714052,msg2907262573,msg3252324813)
log("Mediator_ExtraConfig -> \"ExtraConfig_s1:Server\" : rSiM1_("+"\""+msg319530586+"\""+","+msg11130714052+","+"\""+msg2907262573+"\""+","+msg3252324813+")")
end
function transformrReply_ReqPort_ExtraConfig_s1_Toclient(msg:String) do
var msg388045547 :String = msg
PrvPort_ExtraConfig_c1_Toserver!rReply_(msg388045547)
log("Mediator_ExtraConfig -> \"ExtraConfig_c1:FakeClient\" : rReply_("+"\""+msg388045547+"\""+")")
end
}

thing Logger
@scala_trait "org.thingml.utils.log.Access2File"
@thingml_maven_dep "org.thingml.utils"
{
property trace_buffer :String
function log(trace:String) do
print "==LOG: "+trace+" !=="
trace_buffer = trace_buffer + trace +"\n"
end
function printlog() do
print "====TRACE====\n"
print trace_buffer
end
function clearlog() do
trace_buffer =""
end
function writeFile() do
'this.asInstanceOf[org.thingml.utils.log.Access2File].writeFile(' & trace_buffer & ',"C:/Users/HAOSHA~1/AppData/Local/Temp/ThingML_temp/Config_Logger_ExtraConfig/log_ExtraConfig")'
end
}

thing Control includes ControlMessage
@mock "true"{
required port ControlPort{
sends startMsg, stopMsg
}
}


