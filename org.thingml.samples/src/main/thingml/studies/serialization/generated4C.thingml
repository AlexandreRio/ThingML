import "../../core/serializer.thingml"
import "../../core/comm.thingml"
import "../../core/_arduino/comm.thingml"

//test messages
thing fragment testMsgs {
    message m1()@code "27";
}

thing fragment RemoteMsgs includes testMsgs{
//message m1();//code=27
//message m2(i : Integer);//code=1
//message m3(s : String);//code=2
//message m4(i : Integer, s : String);//code=12
}

thing MessageSerializer includes Serializer, RemoteMsgs {
provided port out{
receives m1
}

statechart SerializerBehavior init Serialize {
state Serialize{
internal event m : out?m1 action
do
setHeader(27, 0)
send()
end
}
}

}

thing MessageDeserializer includes Deserializer, RemoteMsgs {
required port in{
sends m1
}

function forward() do
index = DATA_POSITION
readonly var code : Byte = buffer[CODE_POSITION]
if (code == 27) do
deserializeM1()
end
end

function deserializeM1()
do
in!m1()
end

statechart receive init Idle {
state Idle {
on entry index = 0
transition -> ReceiveMessage event m : network?receive_byte
guard m.b == START_BYTE
}
state ReceiveMessage {
transition -> Escape event m : network?receive_byte
guard m.b == ESCAPE_BYTE
internal event m : network?receive_byte
guard not (m.b == ESCAPE_BYTE or m.b == STOP_BYTE)
action storeByte(m.b)
transition -> Idle event m : network?receive_byte
guard m.b == STOP_BYTE
action forward()
internal event m : network?receive_byte
guard m.b == START_BYTE // Should not happen with a reliable channel
action index = 0 // Reset if it happens (some bytes have been lost at some point)
}
state Escape {
transition receive -> ReceiveMessage
event m : network?receive_byte
action storeByte(m.b)
}
}

}

configuration test 
@remote "testRemote::TestThing::.*::.*"
{   
    //Messages are serialized, sent to network, received, deserialized and sent to the former thing
    //hopefully, this has the same behavior than the configuration above...
    instance network : SerialArduino
    instance serializer : MessageSerializer
    instance deserializer : MessageDeserializer
    
    
    connector serializer.network => network.IOStream
    connector deserializer.network => network.IOStream
    
    
}