// 
// (c) SINTEF 2011
//
// Define the behavior of a mediator that briges between a authentication server 
// and a client whose protocols differ. The client is sending the credentials in a
// single message, whereas the server expects two separated messages (one for the
// login and one for the password), resulting two separated acknowlegments.
//
// See also client.thingml, server.thingml
// 
// by Franck CHAUVEL <franck.chauve@sintef.no>
//

datatype String;

datatype Boolean;


thing Server {

	property password: String // Use to store the password

	// Messages exchanged with the client
	message log(login: String, password: String);
	message ack(access: Boolean);
	
	// Messages exchanged with the server
	message login(login: String);
	message password(pwd: String);
	message access(result: Boolean); 
		
	required port Client {
		receives log
		sends ack 
	}
	
	required port Server {
		sends login, password
		receives access
	}
	
	statechart Authentication init Ready {
	
		state Ready {
			on entry print "Ready: Waiting for credential ..."
			
			transition -> CheckPassword
				event e: Client?log
				action do
					password = e.password
					Server!login(e.login)
				end
		}
		
		
		state CheckLogin {
		
			// The login is accepted by the server
			transition -> CheckPassword
				event e: Server?access
				guard e.result == true
				action Server!password(password)
				
			// The login is refused by the server
			transition -> Ready
				event e: Server?access
				guard e.result == false
				action Client!ack(false)
		
		}
		
		
		state CheckPassword  {
			on entry print "Login accepted"
			
			// The password is accepted by the server
			transition -> LoggedOn
				event e: Server?access
				guard e.result == true
				action Client!ack(true)
				
			// The password is refused by the server
			transition -> CheckLogin
				event e: Server?access
				guard e.result == false
				action Client!ack(false)
		}
		
		
		state LoggedOn {
			on entry do 
				print "Password accepted"
				print "You are now logged in"
			end
		}
			
	}
}