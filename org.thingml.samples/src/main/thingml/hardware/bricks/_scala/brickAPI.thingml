import "../../../thingml.thingml"

datatype Device
@scala_type "org.thingml.devices.Device";


//Wrapped for the electronic bricks
//(for actuators)
thing fragment Brick 
{
    //The Scala device mocking the brick
    readonly property device : Device   
}

thing fragment SensorMsgs 
{
	message update(); 
}

//Wrapped for the electronic bricks
//(for sensors)
thing fragment BrickSensor includes SensorMsgs, Brick
@scala_trait "org.thingml.devices.Observer" 
{
    //last value sent by the mock device
    //can be sent to cliend requesting a value (pull mode)
    property lastValue : Int16 = 0
	
	function newValue(v : Integer)@override "true" 
	do
        lastValue = v
		SensorMockUp!update()
	end
	
	function register() 
	do
		'' & device & '.asInstanceOf[org.thingml.devices.Observable].register(this)'
	end
	
    /**
     * This makes it possible to notify the concrete Thing
     * mocking the sensor (push mode)
     */
	provided port SensorMockUp {
		sends update
	}

    required port Sensor {
        receives update
    }
}