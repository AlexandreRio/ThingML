import "../../core/websocket.thingml"
import "Adapter.thingml"


datatype Draft_17
@java_type "org.java_websocket.drafts.Draft_17";

datatype WSClient
@java_type "org.thingml.utils.WSClient";

datatype JsonParser
@scala_type "net.modelbased.sensapp.library.senml.export.JsonParser";


datatype SenMLroot
@scala_type "net.modelbased.sensapp.library.senml.Root";

thing SensAppAdapter includes WebSocketServer, SensAppMassages, Adapter
@scala_trait "org.thingml.utils.WSClientObserver"
@thingml_maven_dep "org.thingml.utils.ws"
@maven_dep
"
<dependency>
   <groupId>net.modelbased.sensapp.library</groupId>
   <artifactId>net.modelbased.sensapp.library.senml</artifactId>
   <version>0.0.1</version>
</dependency>"


{
    property client : WSClient   
    property status : WS_ERR    
    property data : SenMLroot
    
    provided port sensappPort {
		sends wsOpen
        receives setupNotification
	}
    
    
    function onOpen() @override "true"
    do
        print("onOpen")
        lifecycle!onOpen()
        sensappPort!wsOpen()
    end   
    
    function onClose() @override "true"
    do
        lifecycle!onClose()
    end
    
    function onError(msg : String) @override "true"
    do
        print("Error!!!")
        err!onError(msg)
    end
        
    function onMessage(msg : String) @override "true"
    do
        messaging!onMessage(msg)
       if(msg == "Connection refused: connect")
            status = WS_ERR:CONNECTION_REFUSED
        if( ''& msg & '.split(" ")'[0] == "DataNotification" ) do
            data = 'net.modelbased.sensapp.library.senml.export.JsonParser.fromJson(' & msg & '.split(" ")' [1] ')'
            var size : Integer = '' & data & '.measurementsOrParameters.get.size'
            var i : Integer = 0
            while(i < size) do
            
                // different format either the measurement was added using the RESTservice or websockets 
                if(''& msg &'.split("\"")'[1] == "bn") do
                    sensorDataOutput!sensorEvent('' & data & '.baseName.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.value.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.units.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.time.get')
                end
                if(''& msg &'.split("\"")'[1] == "e") do
                    sensorDataOutput!sensorEvent('' & data & '.measurementsOrParameters.get ' & (  i ) & '.name.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.value.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.units.get', '' & data & '.measurementsOrParameters.get ' & (  i ) & '.time.get')
                end
               
                i = i + 1
            end
        end
        if(''& msg & '.split("\\(")'[0] == "getNotification" ) do
            var temp : String = '' & msg & '.split("\"id\"")'[1] 
            var notificationId : String = '' & temp & '.split("\"")'[1]
            '' & client & '.send(' & "getNotified(" + ''& notificationId &'' + ")" & ');' 
        end
    end
  
    
    
    statechart behavior init Init {
    
        state Init {
            
            on entry do
                print("DEBUG: " + _port)
                client = 'new org.thingml.utils.WSClient(' & _port & ', root.asInstanceOf[org.thingml.utils.WSClientObserver], new org.java_websocket.drafts.Draft_17())'               
             end
            
            transition -> Started
            
        }
        
        state Started {
            // open web socket
            on entry do 
                '' & client & '.start();'          
            end
            
            // setup
            internal event msg : sensappPort?setupNotification
            action do
                print("sawrapper " + msg.vsName + " " + msg.sensor)
                // setup notification 
                '' & client & '.send(' & "registerNotification({\"sensor\":\"" + '' & msg.sensor & '' + "\",\"hooks\":[],\"protocol\":\"ws\"})" & ');'
                '' & client & '.send(' & "getNotification(" + ''& msg.sensor &'' + ")" & ');' 
                // register Sensor
                 '' & client & '.send(' & "registerSensor({\n\"id\": \"" + '' & msg.vsName & '' + "\", \"descr\": \"Virtual Sensor\",\n\"schema\": { \"backend\": \"raw\", \"template\": \"Numerical\"}\n})"& ');' 
             end
                          
            // send generated Events
            internal event x: sensorDataInput?sensorEvent
            action do
                '' & client & '.send(' & "dispatch({\"bn\":\"" +  '' & x.sensor & '' + "\",\"e\":[{\"u\":\"" +  '' & x.unit & '' + "\",\"v\":" +  '' & x.val & '' + ",\"t\":" +  '' & x.time & '' + "}]})" & ');' 
            end
            
            internal event s : messaging?send
            action do 
                '' & client & '.send(' & s.msg & ');'
                print("send " + s.msg)
            end
            
            transition -> Stopped
            event lifecycle?stop
            
        }
        
        state Stopped {
            
            on entry do 
                '' & client & '.stop();'
                print("client stopped")
            end
            
            transition -> Started
            event lifecycle?start
            
        }
                
    }
  
    
}