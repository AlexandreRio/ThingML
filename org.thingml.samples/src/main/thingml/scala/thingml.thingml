/* ThingML Framework */

/*****************************************************************************
 * Definition of the default ThingML DataTypes
 *****************************************************************************/
datatype Byte	
	@c_type "uint8_t"
	@c_byte_size "1"
    @java_type "Byte";

datatype Boolean	
	@c_type "uint8_t"
	@c_byte_size "2"
	@java_type "Boolean";

datatype Integer	
	@c_type "int"
	@c_byte_size "2"
    @java_type "Integer"
	@scala_type "Int";
	
datatype UInt8	
	@c_type "uint8_t"
	@c_byte_size "1"
	@java_type "Short";
	
datatype Int8	
	@c_type "int8_t"
	@c_byte_size "1"
	@java_type "Short";

datatype UInt16	
	@c_type "uint16_t"
	@c_byte_size "2"
    @java_type "Integer"
	@scala_type "Int";

datatype Int16	
	@c_type "int"
    @c_byte_size "2"
    @java_type "Integer"
	@scala_type "Int";


datatype Long	
	@c_type "long"
	@c_byte_size "4"
	@java_type "Long";
	
datatype ULong	
	@c_type "unsigned long"
	@c_byte_size "4"
	@java_type "Long";

datatype Double	
	@c_type "double"
	@c_byte_size "4"
	@java_type "Double";

datatype Char	
	@c_type "char"
	@c_byte_size "1"
	@java_type "Char";

datatype String	
	@c_type "char *"
	@c_byte_size "*"
	@java_type "String";

/*****************************************************************************
 * Definition of the ThingML scheduler messages
 *****************************************************************************/

thing fragment ThingMLSchedulerMsg {
	message poll();
}

thing ThingMLScheduler includes ThingMLSchedulerMsg {
	// Event corresponding to the poll operation.
	// Unlike the border-line C-compiler, the Scala compiler will
	// NOT invent connectors, which thus have to be made explicit	
	provided port Polling {
		sends poll
	}
	
	statechart Scheduler init default {
		state default {
			on entry 'class PollTask(p : Port) extends TimerTask{
			  override def run {
			    p.send(new Poll())
			  }
			}
			new Timer().scheduleAtFixedRate(new PollTask(getPort("Polling").get), 5, 5)'
		}
	}
}

/*****************************************************************************
 * Definition of the ThingML test framework
 *****************************************************************************/
 
thing fragment TestMsg {
	message testOut(c : Char);
	message testIn(c : Char);
	message testFailure();
}

thing fragment TestHarness includes TestMsg {

	provided port test {
		sends testIn
		receives testOut, testFailure
	}
	
}

thing fragment Test includes TestMsg {

	required port harness {
		receives testIn
		sends testOut, testFailure
	}
	
}

/*****************************************************************************
 * Definition of the built-in things and messages
 *****************************************************************************/
 
thing fragment TimerMsgs {
	// Start the Timer
	message timer_start(delay : Integer);
	// Cancel the Timer
	message timer_cancel();
	// Notification that the timer has expired
	message timer_timeout();
}

thing fragment Timer includes TimerMsgs
{
	provided port timer
    {
		sends timer_timeout
		receives timer_start, timer_cancel
	}
}