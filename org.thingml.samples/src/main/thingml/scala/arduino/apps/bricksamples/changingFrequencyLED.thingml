import "../../bricks/led.thingml"
import "../../bricks/potentiometer.thingml"
import "../../bricks/servo.thingml"
import "../../devices/softtimer.thingml"

thing ChangingFrequencyLed includes LedMsgs, TimerMsgs, PotentiometerMsgs, ServoMsgs
{
	property frequency : UInt16 = 500
	
	required port Led
	{
		sends led_toggle
	}

	required port Servo {
		sends setPosition
	}
			
	required port Potentiometer {
		receives newValue
	}

	required port Timer
	{
		sends timer_start
		receives timer_timeout
	}
		
	statechart behavior init Running
	{
		state Running
		{
			on entry Timer!timer_start (frequency)
			
			transition toggle -> Running
				event Timer?timer_timeout
				action Led!led_toggle ()
			
			transition update -> Running
				event e: Potentiometer?newValue
				action frequency = e.value
		}

        region Servo init Running
        {
            state Running
		    {
             internal
				event e: Potentiometer?newValue
				action do
                    if (e.value > 180) do
                        Servo!setPosition(180)
                    end
                    if (e.value < 180) do
                        Servo!setPosition(e.value)
                    end
                end
            }
        }
	}
}

configuration ScalaChangingFrequencyLedSimulator
{
	instance led : Led
    instance servo : Servo
	instance potentiometer: Potentiometer
    connector potentiometer.Sensor => potentiometer.SensorMockUp
	instance timer : SoftTimer
	instance controller: ChangingFrequencyLed
	
	connector controller.Timer => timer.timer 
	connector controller.Led => led.Led
    connector controller.Servo => servo.Servo
	connector controller.Potentiometer => potentiometer.Potentiometer
}