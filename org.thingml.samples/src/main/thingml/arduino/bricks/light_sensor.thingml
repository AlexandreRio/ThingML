import "../core/arduino.thingml"
import "../core/analog_input.thingml"

thing fragment LightSensorMsgs 
{
	message read_light ();
	message light_value (val : UInt16);
}

thing LightSensor includes LightSensorMsgs, AnalogInputMsgs
{
    readonly property sample_rate : UInt8 = 1
    property tot_value : UInt16 = 0
    property counter : UInt8 = 0
   
	provided port LightSensor 
    {
		receives read_light
		sends light_value
	}

    required port AnalogInput
    {
        receives analog_input_value
        sends read_analog_input    
    }
    
    statechart LightSensorImpl init Running 
    {        
        internal event m : AnalogInput?analog_input_value
        guard counter < sample_rate
    	action do
            tot_value = tot_value + m.value
            counter = counter + 1
            end
    	
        state Running 
        {   
            internal event m : AnalogInput?analog_input_value
            guard counter == sample_rate or counter > sample_rate
    	    action do
                LightSensor!light_value ((tot_value + m.value) / (sample_rate + 1))
                tot_value = 0
                counter = 0
            end
            
        	transition force_reading -> Read 
            event LightSensor?read_light
        	action AnalogInput!read_analog_input ()
        } 
        
        state Read
        {
            transition read -> Running 
            event m : AnalogInput?analog_input_value
    	    action LightSensor!light_value (m.value)
        }         
    }
}

configuration fragment LightSensor
{
    group io : OnChangeAnalogInput

    instance light_sensor : LightSensor
    connector light_sensor.AnalogInput => io.analog_input.AnalogInput
} 