import "../core/arduino.thingml"

thing fragment SerialMsgs 
{
	message print_byte (b : Byte);
	message print_message (msg : String);
	message print_value (v : Int16);
	message receive_byte (b : Byte);
}

thing Serial includes SerialMsgs, ArduinoStdlibMsgs, ThingMLScheduler
@singleton "true"
{
	provided port Serial 
    {
		sends receive_byte
        receives print_byte, print_message, print_value
	}

    required port Polling 
    {
        receives poll
    }

    statechart SerialImpl init Receiving 
    {        
        state Receiving 
        {
            on entry 'Serial.begin(9600);'
            
            internal event Polling?poll
            guard 'Serial.available()' > 0
            action Serial!receive_byte ('(char)Serial.read()')
            
            internal event m : Serial?print_byte
            action 'Serial.print(' & m.b & ');'
            
            internal event m : Serial?print_message
            action 'Serial.print(' & m.msg & ');'
            
            internal event m : Serial?print_value
            action 'Serial.print(' & m.v & ', DEC);'   
        }
    }
}