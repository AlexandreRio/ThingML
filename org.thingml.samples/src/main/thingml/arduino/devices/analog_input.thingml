import "../core/arduino.thingml"
import "softtimer.thingml"

thing fragment AnalogInputMsgs
{
	message read_analog_input ();
	message analog_input_value (value : Int16);
}

thing fragment AnalogInput includes AnalogInputMsgs, ArduinoStdlibMsgs
{
	readonly property pin : AnalogPin = AnalogPin:A_4
	
	provided port AnalogInput 
	{
		receives read_analog_input
		sends analog_input_value 
	}
	
	required port AnalogIO
	{
		receives analogReadResult
		sends analogRead
	}
}

thing SimpleAnalogInput includes AnalogInput
{
	statechart SimpleAnalogInputImp init Running
	{
		state Running
		{
			transition WaitingResult -> Waiting
			event AnalogInput?read_analog_input
			action AnalogIO!analogRead (pin)
		}
		
		state Waiting
		{
			transition ResultCatched -> Running
			event m : AnalogIO?analogReadResult
			guard m.pin == pin
			action AnalogInput!analog_input_value (m.value)
		}
	}
}

thing PeriodicAnalogInput includes AnalogInput, TimerMsgs
{
	readonly property refresh_rate : UInt16 = 2000

	required port Timer
	{
		receives timer_timeout
		sends timer_start
	}
	statechart PeriodicAnalogInputImp init Running
	{
		internal event m : AnalogIO?analogReadResult
		guard m.pin == pin
		action AnalogInput!analog_input_value (m.value)
		
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition Refresh -> Running
			event Timer?timer_timeout
			event AnalogInput?read_analog_input
			action AnalogIO!analogRead (pin)
		}
	}
}

thing OnChangeAnalogInput includes AnalogInput, TimerMsgs
{
	readonly property value_precision : Int8 = 1
	readonly property refresh_rate : UInt8 = 20
	
	property oldValue : Int16 = 3333
	
	required port Timer
	{
		sends timer_start
		receives timer_timeout
	}
	
	statechart OnChangeAnalogInputImpl init Running
	{
		internal event m : AnalogIO?analogReadResult
		guard m.pin == pin and (m.value - oldValue < - value_precision or m.value - oldValue > value_precision)
		action do
			AnalogInput!analog_input_value (m.value)
			oldValue = m.value
			end
		
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition Check -> Running 
			event Timer?timer_timeout
			action AnalogIO!analogRead (pin)
		} 	 
	
	 	region SimpleAnalogRead init Idle 
	 	{
        	state Idle 
        	{ 
        		transition waiting_answer -> Waiting 
        		event AnalogInput?read_analog_input
        		action AnalogIO!analogRead (pin)
        	}
            
            state Waiting 
            {
                transition GotAnswer -> Idle 
                event m: AnalogIO?analogReadResult 
                guard m.pin == pin
                action AnalogInput!analog_input_value (m.value)
            }    
        }	
	}	
}

configuration fragment SimpleAnalogInput
{
    instance arduino : Arduino

    instance analog_input : SimpleAnalogInput
    connector analog_input.AnalogIO => arduino.AnalogIO
}

configuration fragment PeriodiqueAnalogInput
{
    instance arduino : Arduino
    
    instance analog_input : PeriodicAnalogInput
        set refresh_rate = 2000
    instance timer : SoftTimer
    connector analog_input.AnalogIO => arduino.AnalogIO
    connector analog_input.Timer => timer.timer
}

configuration fragment OnChangeAnalogInput
{
    instance arduino : Arduino
    
    instance analog_input : OnChangeAnalogInput
    instance timer : SoftTimer
    connector analog_input.AnalogIO => arduino.AnalogIO
    connector analog_input.Timer => timer.timer
} 