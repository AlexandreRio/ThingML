import "../core/arduino.thingml"

thing fragment DigitalInputMsgs 
{
    message read_digital_input ();
	message digital_input_value (value : DigitalState);
}

thing fragment DigitalInput includes DigitalInputMsgs, ArduinoStdlibMsgs, ThingMLScheduler
{	
	readonly property pin : DigitalPin = DigitalPin:PIN_3
    readonly property pullup : Boolean = false
	
	// Events generated by the buttons
	provided port DigitalInput {
		receives read_digital_input
		sends digital_input_value
	}
	
	required port DigitalIO
    {
        sends pinMode, digitalRead, digitalWrite
		receives digitalReadResult    
    }
}

thing SimpleDigitalInput includes DigitalInput {
    
    statechart SimpleDigitalInputImpl init Idle {
        
        // Global initialization of the pin
        on entry do
        	DigitalIO!pinMode(pin, PinMode:INPUT)
            if (pullup) DigitalIO!digitalWrite(pin, DigitalState:HIGH) // pull-up
        end
        
        state Idle { 
            transition -> Waiting 
            event DigitalInput?read_digital_input
            action DigitalIO!digitalRead(pin)
        }
            
        state Waiting {
            transition -> Idle 
            event m: DigitalIO?digitalReadResult 
            guard m.pin == pin
            action DigitalInput!digital_input_value(m.value)
        }    
    }       
}

thing OnChangeDigitalInput includes DigitalInput 
{
    required port Polling {
		receives poll
	}
	
	 statechart OnChangeDigitalInputImpl init Low {
        
        // Global initialization of the pin
        on entry do
        	DigitalIO!pinMode(pin, PinMode:INPUT)
            if (pullup) DigitalIO!digitalWrite(pin, DigitalState:HIGH) // pull-up
        end
        
        // Detect changes in the io pins and send messages for every changes
        state Low {
            
            on entry DigitalInput!digital_input_value(DigitalState:LOW)
            
            transition -> High
            event m: DigitalIO?digitalReadResult
            guard m.value == DigitalState:HIGH and m.pin == pin 
            
        }
        
        state High {
            
            on entry DigitalInput!digital_input_value(DigitalState:HIGH)
            
            transition pressed -> Low
            event m: DigitalIO?digitalReadResult
            guard m.value == DigitalState:LOW and m.pin == pin
            
        }
        
        // Region which ansewers direct requests (Should be imported from SimpleDigitalInput)
        region ProcessRequests init Idle {
            state Idle { transition -> Waiting event DigitalInput?read_digital_input }
            
            state Waiting {
                transition -> Idle event m: DigitalIO?digitalReadResult guard m.pin == pin
                action DigitalInput!digital_input_value(m.value)
            }    
        }
        
        // Region which polls the io pin (Waits for the result before polling again)
        region Polling init Poll {
            state Poll { transition -> Wait event Polling?poll action DigitalIO!digitalRead(pin) } 
            state Wait { transition -> Poll event m: DigitalIO?digitalReadResult guard m.pin == pin }  
        }
    }   
}

configuration fragment OnChangeDigitalInput
{
    instance arduino : Arduino

    instance digital_input : OnChangeDigitalInput
    connector digital_input.DigitalIO => arduino.DigitalIO
}