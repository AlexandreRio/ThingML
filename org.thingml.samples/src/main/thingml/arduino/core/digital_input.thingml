import "../core/arduino.thingml"
import "arduino_timer.thingml"


thing fragment DigitalInputMsgs includes ArduinoStdlibMsgs
{
    message read_digital_input ();
	message digital_input_value (value : DigitalState);
}

thing fragment DigitalInput includes DigitalInputMsgs
{	
	readonly property pin : DigitalPin = DigitalPin:PIN_3
    readonly property pullup : Boolean = false
	
	// Events generated by the buttons
	provided port DigitalInput 
    {
		receives read_digital_input
		sends digital_input_value
	}
	
	required port DigitalIO
    {
        sends pin_mode, digital_read, digital_write
		receives digital_read_result    
    }
}

thing SimpleDigitalInput includes DigitalInput 
{    
    statechart SimpleDigitalInputImpl init Idle 
    {    
        // Global initialization of the pin
        on entry do
        	DigitalIO!pin_mode (pin, PinMode:INPUT)
            if (pullup) DigitalIO!digital_write (pin, DigitalState:HIGH) // pull-up
        end
        
        state Idle 
        { 
            transition -> Waiting 
            event DigitalInput?read_digital_input
            action DigitalIO!digital_read (pin)
        }
            
        state Waiting 
        {
            transition -> Idle 
            event m : DigitalIO?digital_read_result 
            guard m.pin == pin
            action DigitalInput!digital_input_value (m.value)
        }    
    }       
}

thing PeriodicDigitalInput includes DigitalInput, TimerMsgs
{
	readonly property refresh_rate : Long = 5000
	
	required port Timer
	{
		sends timer_start
		receives timer_timeout
	}
	
	statechart PeriodicDigitalInputImpl init Running
	{
		on entry do
        	DigitalIO!pin_mode (pin, PinMode:INPUT)
            if (pullup) DigitalIO!digital_write (pin, DigitalState:HIGH) // pull-up
        	end
			
		state Running
		{
			on entry Timer!timer_start (refresh_rate)
			
			transition -> Waiting
			event Timer?timer_timeout
			event DigitalInput?read_digital_input
			action DigitalIO!digital_read (pin)
		}
		
		state Waiting
		{
			transition -> Running
			event m : DigitalIO?digital_read_result
			guard m.pin == pin
			action DigitalInput!digital_input_value (m.value)
		}
	}
}

thing OnChangeDigitalInput includes DigitalInput, ThingMLScheduler
{
    required port Polling 
    {
		receives poll
	}
	
    statechart OnChangeDigitalInputImpl init Low 
    {    
        // Global initialization of the pin
        on entry do
        	DigitalIO!pin_mode (pin, PinMode:INPUT)
            if (pullup) DigitalIO!digital_write (pin, DigitalState:HIGH) // pull-up
            end
        
        // Detect changes in the io pins and send messages for every changes
        state Low 
        {    
            on entry DigitalInput!digital_input_value (DigitalState:LOW)
            
            transition -> High
            event m: DigitalIO?digital_read_result
            guard m.value == DigitalState:HIGH and m.pin == pin    
        }
        
        state High 
        {    
            on entry DigitalInput!digital_input_value (DigitalState:HIGH)
            
            transition pressed -> Low
            event m: DigitalIO?digital_read_result
            guard m.value == DigitalState:LOW and m.pin == pin   
        }
        
        // Region which ansewers direct requests (Should be imported from SimpleDigitalInput)
        region ProcessRequests init Idle 
        {
            state Idle 
            { 
                transition -> Waiting 
                event DigitalInput?read_digital_input 
            }
            
            state Waiting 
            {
                transition -> Idle 
                event m: DigitalIO?digital_read_result 
                guard m.pin == pin
                action DigitalInput!digital_input_value (m.value)
            }    
        }
        
        // Region which polls the io pin (Waits for the result before polling again)
        region Polling init Poll 
        {
            state Poll 
            { 
                transition -> Wait 
                event Polling?poll 
                action DigitalIO!digital_read (pin) 
            } 
            
            state Wait 
            { 
                transition -> Poll 
                event m: DigitalIO?digital_read_result 
                guard m.pin == pin 
            }  
        }
    }   
}

configuration fragment SimpleDigitalInput
{
    instance arduino : Arduino

    instance digital_input : SimpleDigitalInput
    connector digital_input.DigitalIO => arduino.DigitalIO
}

configuration fragment PeriodicDigitalInput
{
    instance arduino : Arduino
	instance timer : SoftTimer

    instance digital_input : PeriodicDigitalInput
    connector digital_input.DigitalIO => arduino.DigitalIO
    connector digital_input.Timer => timer.timer
}

configuration fragment OnChangeDigitalInput
{
    instance arduino : Arduino

    instance digital_input : OnChangeDigitalInput
    connector digital_input.DigitalIO => arduino.DigitalIO
}