import "../devices/extendedSerial.thingml"
import "../devices/tempsensor.thingml"
import "../devices/led.thingml"
import "../devices/tempsensor.thingml"

thing SerialTempSensorAdv includes ExtendedSerialMsgs, LEDMsgs, TempSensorMsgs 
{
    required port Led
    {
        sends led_toggle
    }
    
    required port extSerial 
    {
		receives receiveByte//, receiveValue 
        sends printByte, printMessage, printValue
	}

    required port TempSensor 
    {
		 sends get_temperature, reset_min_max, subscribe_temperature, unsubscribe_temperature
		 receives temperature
	}
	
	required port TempAlarms 
    {
		sends activate_alarms, deactivate_alarms
	    //receives low_temp_alarm, high_temp_alarm
	}                

    statechart SerialTempSensorAdvImpl init Running 
    {    
        state Running 
        {
        	internal event m : extSerial?receiveByte
            guard m.b == '\'s\'' 
        	action TempSensor!subscribe_temperature (3)
        	
        	internal event m : extSerial?receiveByte
            guard m.b == '\'u\'' 
        	action TempSensor!unsubscribe_temperature ()
        	
        	internal event m : extSerial?receiveByte
            guard m.b == '\'r\'' 
        	action TempSensor!reset_min_max ()
        
        	internal event m : TempSensor?temperature
    		action do
                extSerial!printMessage ("Temperature: ")
                extSerial!printValue (m.t)
                extSerial!printByte ('\'\n\'')
                end
                
        	internal event m : extSerial?receiveByte
            guard m.b == '\'g\'' 
        	action TempSensor!get_temperature ()
        	
        	transition -> GetMin 
            event m : extSerial?receiveByte
            guard m.b == '\'m\'' 
            action TempSensor!get_temperature ()
            
            transition -> GetMax 
            event m : extSerial?receiveByte
            guard m.b == '\'M\'' 
            action TempSensor!get_temperature ()    
        }
        
        state GetMin
        {
        	transition -> Running
        	event m : TempSensor?temperature
    		action do
    			extSerial!printMessage ("Mini: ")
    			extSerial!printValue (m.min)
    			extSerial!printByte ('\'\n\'')
    			end
        }
        
        state GetMax
        {
        	transition -> Running
        	event m : TempSensor?temperature
    		action do
    			extSerial!printMessage ("Maxi: ")
    			extSerial!printValue (m.max)
    			extSerial!printByte ('\'\n\'')
    			end
        }
    }
}

configuration SerialTempSensorAdv
{
    // Arduino declaration.
    instance arduino : Arduino
    
    // Temperature sensor device configuration.
    instance tempsensor : TempSensor
    	set pin = AnalogPin:A_3
    instance tempTimer : SoftTimer
    connector tempsensor.timer => tempTimer.timer
    connector tempsensor.adc => arduino.AnalogIO
    
    // Extended serial device configuration.
    instance exSerial : ExtendedSerial
    instance serial : Serial
    instance testdigit : IsDigit
	connector exSerial.serial => serial.serial
    connector exSerial.testDigit => testdigit.testDigit 
    
	// Led device configuration.
    instance led : LED 
        set pin = DigitalPin:PIN_8 
	connector led.DigitalIO => arduino.DigitalIO

    // Application configuration.
	instance app : SerialTempSensorAdv
	connector app.extSerial => exSerial.extSerial
    connector app.Led => led.LED
    connector app.TempSensor => tempsensor.tempsensor
    connector app.TempAlarms => tempsensor.tempalarms
}