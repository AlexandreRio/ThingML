import "../../core/arduino.thingml"
import "../../bricks/lcd_screen.thingml"
import "../../bricks/rotation_sensor.thingml"
import "../../bricks/temperature_sensor.thingml"
import "../../bricks/light_sensor.thingml"
import "../../bricks/sound_sensor.thingml"

//*
// This is an example of ThingML use to generate Arduino code which uses 
// Electronic Brick components.
//  
// Requirements:
//      - Lcd screen 1602 (1)
//      - Sound sensor (1) or Light Sensor (1) or Rotation sensor (1) or Temperature sensor (1) ->  Default pin: A_4 
//
// The screen displays the value of the sensor of your choice.
// Keep in mind that in this example, you have to use only one sensor at the time.
//*

thing fragment SimpleSensorDisplay includes LcdScreenMsgs
{
	required port LcdScreen
	{
		sends print_string, set_cursor, print_value
	}
}

// Use only one of the four things following.

thing SimpleRotSensorDisplay includes SimpleSensorDisplay, RotationSensorMsgs
{
	required port RotationSensor
	{
		receives rotation_value
        sends read_rotation
	}
	
	statechart SimpleRotSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Rotation val:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)

			transition refresh -> Running
			event m : RotationSensor?rotation_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleTempSensorDisplay includes SimpleSensorDisplay, TemperatureSensorMsgs
{
	required port TempSensor
	{
		receives temperature_value
	}
	
	statechart SimpleTempSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Temperature:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : TempSensor?temperature_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleLightSensorDisplay includes SimpleSensorDisplay, LightSensorMsgs
{
	required port LightSensor
	{
		receives light_value
	}
	
	statechart SimpleLightSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Light value:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : LightSensor?light_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleSoundSensorDisplay includes SimpleSensorDisplay, SoundSensorMsgs
{
	required port SoundSensor
	{
		receives sound_value
	}
	
	statechart SimpleSoundSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Sound value:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : SoundSensor?sound_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

configuration SimpleSensorDisplay
{
    group rotation_sensor : RotationSensor
        set rotation_sensor.io.analog_input.pin = AnalogPin:A_4
        
    group temperature_sensor : TemperatureSensor
        set temperature_sensor.io.analog_input.pin = AnalogPin:A_4
        
    group light_sensor : LightSensor
        set light_sensor.io.analog_input.pin = AnalogPin:A_4
        set light_sensor.io.analog_input.value_precision = 3
        
    group sound_sensor : SoundSensor
        set sound_sensor.io.analog_input.pin = AnalogPin:A_4
        set sound_sensor.sound_sensor.sample_rate = 500
 
    instance lcd_screen : LcdScreen
       
    //* Uncomment only the lines which refer to the sensor you want use. *//
    
//     // * Rotation sensor *
//     instance rot_sensor_display : SimpleRotSensorDisplay
//     connector rot_sensor_display.RotationSensor => rotation_sensor.rotation_sensor.RotationSensor
//  	connector rot_sensor_display.LcdScreen => lcd_screen.LcdScreen
    
//     // * Temperature sensor *
// 	instance temp_sensor_display : SimpleTempSensorDisplay
//     connector temp_sensor_display.TempSensor => temperature_sensor.temperature_sensor.TemperatureSensor
// 	connector temp_sensor_display.LcdScreen => lcd_screen.LcdScreen

//     // * Light sensor *
// 	instance light_sensor_display : SimpleLightSensorDisplay
//     connector light_sensor_display.LightSensor => light_sensor.light_sensor.LightSensor
// 	connector light_sensor_display.LcdScreen => lcd_screen.LcdScreen

    // * Sound  sensor *
	instance sound_sensor_display : SimpleSoundSensorDisplay
    connector sound_sensor_display.SoundSensor => sound_sensor.sound_sensor.SoundSensor
    connector sound_sensor_display.LcdScreen => lcd_screen.LcdScreen
}