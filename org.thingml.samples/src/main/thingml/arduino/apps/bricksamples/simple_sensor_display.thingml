import "../../core/arduino.thingml"
import "../../bricks/lcd_screen.thingml"
import "../../bricks/rotation_sensor.thingml"
import "../../bricks/temperature_sensor.thingml"
import "../../bricks/light_sensor.thingml"
import "../../bricks/sound_sensor.thingml"

//*
// This is an example of ThingML use to generate Arduino code which uses 
// Electronic Brick components.
//  
// Requirements:
//      - Lcd screen 1602 (1)
//      - Sound sensor (1) or Light Sensor (1) or Rotation sensor (1) or Temperature sensor (1) ->  Default pin: A_4 
//
// The screen displays the value of the sensor of your choice.
// Keep in mind that in this example, you have to use only one sensor at the time.
//*

thing fragment SimpleSensorsDisplay includes LcdScreenMsgs
{
	required port LcdScreen
	{
		sends print_string, set_cursor, print_value
	}
}

// Use only one of the four things following.

thing SimpleRotSensorDisplay includes SimpleSensorsDisplay, RotationSensorMsgs
{
	required port RotationSensor
	{
		receives rotation_value
        sends read_rotation
	}
	
	statechart SimpleRotSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Rotation val:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)

			transition refresh -> Running
			event m : RotationSensor?rotation_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleTempSensorDisplay includes SimpleSensorsDisplay, TemperatureSensorMsgs
{
	required port TempSensor
	{
		receives temperature_value
	}
	
	statechart SimpleTempSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Temperature:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : TempSensor?temperature_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleLightSensorDisplay includes SimpleSensorsDisplay, LightSensorMsgs
{
	required port LightSensor
	{
		receives light_value
	}
	
	statechart SimpleLightSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Light value:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : LightSensor?light_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

thing SimpleSoundSensorDisplay includes SimpleSensorsDisplay, SoundSensorMsgs
{
	required port SoundSensor
	{
		receives sound_value
	}
	
	statechart SimpleSoundSensorDisplayImpl init Running
	{
		on entry LcdScreen!print_string ("Sound value:")
		
		state Running
		{
			on entry LcdScreen!set_cursor (0, 1)
			transition refresh -> Running
			event m : SoundSensor?sound_value
			action do
                LcdScreen!print_value (m.val)
                LcdScreen!print_string ("    ")
                end
		}
	}
}

configuration SimpleSensorsDisplay
{
    // Arduino declaration.
    instance arduino : Arduino
    
	// Screen declaration.
	instance lcd_screen : LcdScreen

    // Analog input configuration
    instance analog_input : OnChangeAnalogInput
        set pin = AnalogPin:A_4
    instance timer : SoftTimer
    connector analog_input.AnalogIO => arduino.AnalogIO
    connector analog_input.Timer => timer.timer
 		
//* Uncomment only the five lines which refer to the sensor you want use. *//

	// * Rotation sensor *
 	instance pot_sensor_display : SimpleRotSensorDisplay
    instance pot_sensor : RotationSensor
    connector pot_sensor_display.RotationSensor => pot_sensor.RotationSensor
 	connector pot_sensor_display.LcdScreen => lcd_screen.LcdScreen
    connector pot_sensor.AnalogInput => analog_input.AnalogInput

// 	// * Temperature sensor *
// 	instance temp_sensor_display : SimpleTempSensorDisplay
//     instance temp_sensor : TemperatureSensor
//     connector temp_sensor_display.TempSensor => temp_sensor.TemperatureSensor
// 	connector temp_sensor_display.LcdScreen => lcd_screen.LcdScreen
//     connector temp_sensor.AnalogInput => analog_input.AnalogInput

// 	// * Light sensor *
// 	instance lux_sensor_display : SimpleLightSensorDisplay
//     instance lux_sensor : LightSensor
//     connector lux_sensor_display.LightSensor => lux_sensor.LightSensor
// 	connector lux_sensor_display.LcdScreen => lcd_screen.LcdScreen
//     connector lux_sensor.AnalogInput => analog_input.AnalogInput 

//     // * Sound  sensor *
// 	instance sound_sensor_display : SimpleSoundSensorDisplay
//     instance sound_sensor : SoundSensor
//     connector sound_sensor_display.SoundSensor => sound_sensor.SoundSensor
//     connector sound_sensor_display.LcdScreen => lcd_screen.LcdScreen
//     connector sound_sensor.AnalogInput => analog_input.AnalogInput  
}