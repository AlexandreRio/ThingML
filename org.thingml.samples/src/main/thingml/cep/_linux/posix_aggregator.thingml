import "../../datatypes.thingml"

thing fragment PosixMathAgg {
    //Sum
    function sumByte(tab: Byte[]) : Byte do
        var index : Integer = 0
        var sum : Byte = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumInteger(tab: Integer[]) : Integer do
        var index : Integer = 0
        var sum : Integer = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumUInt8(tab: UInt8[]) : UInt8 do
        var index : Integer = 0
        var sum : UInt8 = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumInt8(tab: Int8[]) : Int8 do
        var index : Integer = 0
        var sum : Int8 = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumUInt16(tab: UInt16[]) : UInt16 do
        var index : Integer = 0
        var sum : UInt16 = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumInt16(tab: Int16[]) : Int16 do
        var index : Integer = 0
        var sum : Int16 = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumLong(tab: Long[]) : Long do
        var index : Integer = 0
        var sum : Long = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumULong(tab: ULong[]) : ULong do
        var index : Integer = 0
        var sum : ULong = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumDouble(tab: Double[]) : Double do
        var index : Integer = 0
        var sum : Double = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    function sumLongLong(tab: LongLong[]) : LongLong do
        var index : Integer = 0
        var sum : LongLong = 0
        while(index < tab.length) do
            sum = sum + tab[index]
            index = index + 1
        end
        return sum
    end
    
    //Max
    function maxByte(tab: Byte[]) : Byte do
        var index : Integer = 0 
        var max : Byte
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxInteger(tab: Integer[]) : Integer do
        var index : Integer = 0 
        var max : Integer
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxUInt8(tab: UInt8[]) : UInt8 do
        var index : Integer = 0 
        var max : UInt8
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxInt8(tab: Int8[]) : Int8 do
        var index : Integer = 0 
        var max : Int8
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxUInt16(tab: UInt16[]) : UInt16 do
        var index : Integer = 0 
        var max : UInt16
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxInt16(tab: Int16[]) : Int16 do
        var index : Integer = 0 
        var max : Int16
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxLong(tab:Long[]) : Long do
        var index : Integer = 0 
        var max : Long
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxULong(tab: ULong[]) : ULong do
        var index : Integer = 0 
        var max : ULong
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function maxDouble(tab: Double[]) : Double do
        var index : Integer = 0 
        var max : Double
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    function max(tab: LongLong[]) : LongLong do
        var index : Integer = 0 
        var max : LongLong
        if(tab.length > 0) do
            max = tab[0]
            while(index < tab.length) do
                if(tab[index] > max) do
                    max = tab[index]
                end
                index = index + 1
            end
        end
        return max
    end
    
    //Min
    function minByte(tab: Byte[]) : Byte do
        var index : Integer = 0 
        var min : Byte
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minInteger(tab: Integer[]) : Integer do
        var index : Integer = 0 
        var min : Integer
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minUInt8(tab: UInt8[]) : UInt8 do
        var index : Integer = 0 
        var min : UInt8
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minInt8(tab: Int8[]) : Int8 do
        var index : Integer = 0 
        var min : Int8
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minUInt16(tab: UInt16[]) : UInt16 do
        var index : Integer = 0 
        var min : UInt16
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minInt16(tab: Int16[]) : Int16 do
        var index : Integer = 0 
        var min : Int16
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minLong(tab: Long[]) : Long do
        var index : Integer = 0 
        var min : Long
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minULong(tab: ULong[]) : ULong do
        var index : Integer = 0 
        var min : ULong
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minDouble(tab: Double[]) : Double do
        var index : Integer = 0 
        var min : Double
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    function minLongLong(tab: LongLong[]) : LongLong do
        var index : Integer = 0 
        var min : LongLong
        if(tab.length > 0) do
            min = tab[0]
            while(index < tab.length) do
                if(tab[index] < min) do
                    min = tab[index]
                end
                index = index + 1
            end
        end
        return min
    end
    
    //Average
    function avgByte(tab: Byte[]) : Byte do
        return sumByte(tab) / tab.length
    end 
    
    function avgInteger(tab: Integer[]) : Integer do
        return sumInteger(tab) / tab.length
    end
    
    function avgUInt8(tab: UInt8[]) : UInt8 do
        return sumUInt8(tab) / tab.length
    end 
    
    function avgInt8(tab: Int8[]) : Int8 do
        return sumInt8(tab) / tab.length
    end 
    
    function avgUInt16(tab: UInt16[]) : UInt16 do
        return sumUInt16(tab) / tab.length
    end 
    
    function avgInt16(tab: Int16[]) : Int16 do
        return sumInt16(tab) / tab.length
    end
    
    function avgLong(tab: Long[]) : Long do
        return sumLong(tab) / tab.length
    end 
    
    function avgULong(tab: ULong[]) : ULong do
        return sumULong(tab) / tab.length
    end 
    
    function avgDouble(tab: Double[]) : Double do
        return sumDouble(tab) / tab.length
    end 
    
    function avgLongLong(tab: LongLong[]) : LongLong do
        return sumLongLong(tab) / tab.length
    end  
    
    //Count
    function countByte(tab: Byte[]) : Byte do
        return tab.length
    end 
    
    function countInteger(tab: Integer[]) : Integer do
        return tab.length
    end
    
    function countUInt8(tab: UInt8[]) : UInt8 do
        return tab.length
    end 
    
    function countInt8(tab: Int8[]) : Int8 do
        return tab.length
    end 
    
    function countUInt16(tab: UInt16[]) : UInt16 do
        return tab.length
    end 
    
    function countInt16(tab: Int16[]) : Int16 do
        return tab.length
    end
    
    function countLong(tab: Long[]) : Long do
        return tab.length
    end 
    
    function countULong(tab: ULong[]) : ULong do
        return tab.length
    end 
    
    function countDouble(tab: Double[]) : Double do
        return tab.length
    end 
    
    function countLongLong(tab: LongLong[]) : LongLong do
        return tab.length
    end 
    
    
}


