import "../timer.thingml"
import "../scheduler.thingml"

datatype JavaTimer
@java_type "java.util.Timer";

datatype JavaTimerTask
@java_type "java.util.TimerTask";

// Manage a set of software timers.
thing TimerScala includes Timer, ThingMLSchedulerMsg
@pim "Timer"
@platform "scala"
@scala_trait "org.thingml.utils.TimerTaskTrait"
{

    property javaTimer : JavaTimer = 'new java.util.Timer()'
    property lastTask : JavaTimerTask
	
    required port Polling {
		receives poll
	}

    function run()@override "true" 
    do
        timer!timer_timeout()
    end
    
    function cancel() : Integer
    do
      var status : Integer = 0
      'try {'
      if (not(lastTask == 'null')) 
      do
      '' & lastTask & '.cancel'            
      '' & javaTimer & '.purge'
      end
      '} catch {'
      'case _ =>'
      javaTimer = 'new java.util.Timer()'
      status = 1
      '}'
      return status
    end
    
    function start(delay : Integer) : Integer
    do
        var status : Integer = 0
        cancel()
        lastTask = 'this.newTimerTask'
        'try {'
        '' & javaTimer & '.schedule(' & lastTask & ', ' & delay & ')'
        '} catch {'
        'case _ =>'
        status = -1
        '}'
        return status
    end
    
    statechart SoftTimer init default {
    
        internal start
            event m : timer?timer_start
            guard m.delay > 0
            action do
                start(m.delay)
            end
            
        internal cancel
            event m : timer?timer_cancel
            action cancel()
    
        state default {}
        
    }
}