import "../../../../../org.thingml.samples/src/main/thingml/thingml.thingml"
import "../../../../../org.thingml.samples/src/main/thingml/datatypes.thingml"

thing fragment TestMsgs {
	message msg(prop1: Integer, prop2 : Integer);
	message ack(prop1: Integer, prop2 : Integer);
}

thing TestSimpleStreamOnReceive includes Test, TestMsgs
@test "hij # hio"
@conf "instance receive : ReceiveMsgs"
@conf "connector receive.receiveService => test.sendService"
{
	 provided port sendService {
		sends msg
		receives ack
	}

	property prop1 : Integer = 5
	property prop2 : Integer = 87

	statechart TestInit init Init {

		state Init {
			
            internal
			stream s1 from event m : harnessIn?testIn
			guard s1->c == '\'h\''
			action harnessOut!testOut('\'h\'') //change to s1->c

			transition -> End
			stream s2 from event m2 : harnessIn?testIn
			guard s2->c == '\'i\''
		}

		state End {
            on entry harnessOut!testOut('\'i\'')
            
            internal
			stream s3 from event m : harnessIn?testIn
			guard s3->c == '\'j\''
			action sendService!msg(prop1,prop2)

            //change to stream
			internal
			event resp : sendService?ack
			action do
                if(resp.prop1 == prop1 and resp.prop2 == prop2)
                    harnessOut!testOut('\'o\'')
            end
		}
	}
}

thing ReceiveMsgs includes TestMsgs, Test
{

	required port receiveService {
    		receives msg
    		sends ack
    }

    statechart ReceiveMsgs init Receive {
    	state Receive {
    		//change to stream
            internal
    		event e : receiveService?msg
    		action do
    			if(e.prop1 == 5 and e.prop2 == 87)
                    receiveService!ack(e.prop1,e.prop2)
    		end
    	}
    }

}