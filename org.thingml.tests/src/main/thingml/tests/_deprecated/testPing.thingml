import "../../../../../org.thingml.samples/src/main/thingml/thingml.thingml"

// One client server couple.

thing PingMsg {
    message ping();
    message pong();        
}

thing Pingable includes PingMsg {
    provided port pp {
         receives ping
         sends pong
    }
    
    statechart PingableImpl init Idle {
        state Idle {
            internal event pp?ping
            action pp!pong()    
        }    
    } 
}

thing TestPing includes Test, PingMsg
@test "ppp # epxrepxrepxr"
@conf "instance pingable : Pingable"
@conf "connector test.ppclient => pingable.pp"
{
    required port ppclient {
        sends ping
        receives pong    
    }
    
	statechart TestPingImpl init Ping {
	
		state Ping {
			transition -> Pong
			event m : harnessIn?testIn
			guard m.c == '\'p\''
			after do
                harnessOut!testOut('\'p\'')
                ppclient!ping()
            end
		}

		state Pong {
    
            on entry harnessOut!testOut('\'e\'')
            on exit harnessOut!testOut('\'x\'')

			transition -> Ping
			event m : ppclient?pong
			after harnessOut!testOut('\'r\'')
		}
	}
}