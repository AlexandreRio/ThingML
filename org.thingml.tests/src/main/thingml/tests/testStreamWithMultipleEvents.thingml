import "../../../../../org.thingml.samples/src/main/thingml/thingml.thingml"

thing fragment TestsMsgs {
    message msg1();
    message msg2();
    message msg3();
}

thing TestStreamWithMultipleEvents includes Test, TestsMsgs
@test "n # iii"
@test "s # iii"
@test "S # iii"
@conf "connector test.requiredService => test.providedService"
{
    provided port providedService {
        sends msg1, msg2, msg3
    }
    
    required port requiredService {
        receives msg1, msg2, msg3  
    }
    
    statechart TestStreamWithMultipleEvents init Init {
        state Init {
            transition -> First
            stream s1 from event harnessIn?testIn
			trigger s1->c == '\'n\''

            transition -> Second
            stream s2 from event harnessIn?testIn
			trigger s2->c == '\'s\''

            transition -> Third
            stream s3 from event harnessIn?testIn
			trigger s3->c == '\'S\''
        }
        
        state First {
            on entry do
                providedService!msg1()
                providedService!msg2()
                providedService!msg3()
            end
            
            internal
            stream s4 from event requiredService?msg1
            stream s5 from event requiredService?msg2
            stream s6 from event requiredService?msg3
            action harnessOut!testOut('\'i\'')     
        }
        
        state Second {
            on entry do
                providedService!msg1()
                providedService!msg2()
                providedService!msg3()
            end
            
            internal
            stream s7 from event requiredService?msg1
            stream s8 from event requiredService?msg2
            stream s9 from event requiredService?msg3
            action harnessOut!testOut('\'i\'')     
        }
        
        state Third {
            on entry do
                providedService!msg1()
                providedService!msg2()
                providedService!msg3()
            end
            
            internal
            stream s10 from event requiredService?msg1
            stream s11 from event requiredService?msg2
            stream s12 from event requiredService?msg3
            action harnessOut!testOut('\'i\'')     
        }
    }
}