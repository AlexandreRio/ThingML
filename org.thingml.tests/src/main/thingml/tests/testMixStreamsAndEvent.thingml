import "thingml.thingml"

thing fragment TestMsgs {
    message cepMsg(aName : Char);    
}

thing TestMixStreamsAndEvent includes Test, TestMsgs
@test "sabsB # 1sa2(As|sA)B"
@conf "connector test.cepRcv => test.cepSend"
{
	function aFunction(x1 : Integer, x2 : Integer, x3 : Integer) : Boolean do
        return  ((x1 == x2) and (x2 == x3))
    end
    
    provided port cepSend {
        sends cepMsg   
    }
    
    required port cepRcv {
        receives cepMsg
    }
    
     stream testStream do
        from m : [ harnessIn?testIn ]
        select c : m.c
        action cepSend!cepMsg(c)
    end
     
	statechart TestInit init S3 {
        composite state S3 init S1 {
            internal 
            event m : cepRcv?cepMsg
            guard m.aName == '\'s\''
            action harnessOut!testOut('\'s\'') 
            
            state S1 {
                on entry harnessOut!testOut('\'1\'')
                
                internal 
                event m : cepRcv?cepMsg
                guard m.aName == '\'a\''
                action harnessOut!testOut('\'a\'') 
                
                transition -> S2
                event e : harnessIn?testIn
                guard e.c == '\'b\''
            }
            
            state S2 {
                on entry harnessOut!testOut('\'2\'')
                
                internal 
                event e : harnessIn?testIn
                guard (1== '1' and not(1>5 and 1==-5) and (1 == 2 or 2==2) and e.c == '\'s\'')
                action harnessOut!testOut('\'A\'')
                
                internal 
                event m : cepRcv?cepMsg
                guard m.aName == '\'B\''
                action harnessOut!testOut('\'B\'')
            }  
        }
	}
}
