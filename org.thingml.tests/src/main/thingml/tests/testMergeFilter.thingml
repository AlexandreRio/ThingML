import "thingml.thingml"

thing fragment TestMsgs {
    message m1();
    message m2();
    message m3();
    
    message res();
}

thing TestMergeFilter includes Test, TestMsgs
@test " # ff"
@conf "connector test.recv => test.send"
{
    provided port send {
        sends m1, m2, m3, res
    }

    required port recv {
        receives m1, m2, m3, res
    }

    stream filteredMergeOK do
        from m : [ e1 : [recv?m1]::keep(false) | e2 : [recv?m2]::keep(true) | recv?m3 -> res]::keep(true)
        action send!res()
    end
    
    stream filteredMergeFail do
        from m : [ e1 : [recv?m1]::keep(false) | e2 : [recv?m2]::keep(true) | recv?m3 -> res]::keep(false)
        action send!res()
    end



    statechart testSimpleFilter init Init {
        state Init {
            on entry do
                send!m1()
                send!m2()
                send!m3()
            end
            
            internal 
            event recv?res
            action harnessOut!testOut('\'f\'')
        }
    }


}
