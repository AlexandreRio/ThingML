import "thingml.thingml"

thing fragment TestMsgs {
    message m1();
    message m2();
    message m3();
    
    message res();
}

thing TestMergeFilter includes Test, TestMsgs
@test " # ff"
@conf "connector test.recv => test.send"
{
    provided port send {
        sends m1, m2, m3, res
    }

    required port recv {
        receives m1, m2, m3, res
    }

    operator m1NotPassed(m : m1) : Boolean do
        return 'false'
    end
    
    operator m2Passed(m : m2) : Boolean do
        return 'true'
    end
    
    operator mergePassed(r : res) : Boolean do
        return 'true'
    end
    
    operator mergeNotPassed(r : res) : Boolean do
        return 'false'
    end

    stream filteredMergeOK do
        from m : [ e1 : [recv?m1]::filter(m1NotPassed(e1)) | e2 : [recv?m2]::filter(m2Passed(e2)) | recv?m3 -> res]::filter(mergePassed(m))
        action send!res()
    end
    
    stream filteredMergeFail do
        from m : [ e1 : [recv?m1]::filter(m1NotPassed(e1)) | e2 : [recv?m2]::filter(m2Passed(e2)) | recv?m3 -> res]::filter(mergeNotPassed(m))
        action send!res()
    end



    statechart testSimpleFilter init Init {
        state Init {
            on entry do
                send!m1()
                send!m2()
                send!m3()
            end
            
            internal 
            event recv?res
            action harnessOut!testOut('\'f\'')
        }
    }


}
